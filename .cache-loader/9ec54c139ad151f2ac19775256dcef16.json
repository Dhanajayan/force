{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/auction/components/layout/Banner.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/auction/components/layout/Banner.js","mtime":1521064653000},{"path":"/Users/eve/development/force/.babelrc","mtime":1528124541000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.test = exports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"../../../../components/clock/react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react2 = _interopRequireDefault(require(\"react\"));\n\nvar _bemCnLite = _interopRequireDefault(require(\"bem-cn-lite\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash.get\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _sharify = require(\"sharify\");\n\n// FIXME: Rewire\nvar ClockView = _react.default;\n\nfunction Banner(props) {\n  var auction = props.auction,\n      coverImage = props.coverImage,\n      hasEndTime = props.hasEndTime,\n      isAuction = props.isAuction,\n      isClosed = props.isClosed,\n      isLiveOpen = props.isLiveOpen,\n      isMobile = props.isMobile,\n      liveAuctionUrl = props.liveAuctionUrl,\n      name = props.name;\n\n  var trackEnterLive = function trackEnterLive() {\n    window.analytics.track('click', {\n      type: 'button',\n      label: 'enter live auction',\n      flow: 'auctions',\n      context_module: 'auction banner',\n      destination_path: liveAuctionUrl.replace(_sharify.data.PREDICTION_URL, '')\n    });\n  };\n\n  var b = (0, _bemCnLite.default)('auction-Banner');\n  var type = isAuction ? 'Auction' : 'Sale';\n  return _react2.default.createElement(\"div\", {\n    className: b({\n      isClosed: isClosed,\n      isMobile: isMobile,\n      isLiveOpen: isLiveOpen\n    }),\n    alt: name\n  }, _react2.default.createElement(\"div\", {\n    className: b('background-image', {\n      isClosed: isClosed,\n      isLiveOpen: isLiveOpen\n    }),\n    style: {\n      backgroundImage: \"url('\".concat(coverImage, \"')\")\n    }\n  }), function () {\n    if (isLiveOpen && isAuction) {\n      return _react2.default.createElement(\"div\", {\n        className: b('live-details')\n      }, _react2.default.createElement(\"h1\", null, \"Live Bidding Now Open\"), _react2.default.createElement(\"a\", {\n        onClick: trackEnterLive,\n        href: liveAuctionUrl,\n        className: \"avant-garde-button-white\"\n      }, \"Enter live auction\"));\n    } else if (isClosed) {\n      return _react2.default.createElement(\"div\", {\n        className: b('closed')\n      }, _react2.default.createElement(\"div\", null, type, \" Closed\"));\n    } else if (isAuction || hasEndTime) {\n      return _react2.default.createElement(ClockView, {\n        model: auction,\n        modelName: type,\n        closedText: type + ' Closed'\n      });\n    }\n  }());\n}\n\nBanner.propTypes = {\n  auction: _propTypes.default.object.isRequired,\n  coverImage: _propTypes.default.string.isRequired,\n  hasEndTime: _propTypes.default.bool.isRequired,\n  isAuction: _propTypes.default.bool.isRequired,\n  isClosed: _propTypes.default.bool.isRequired,\n  isLiveOpen: _propTypes.default.bool.isRequired,\n  isMobile: _propTypes.default.bool.isRequired,\n  liveAuctionUrl: _propTypes.default.string,\n  name: _propTypes.default.string.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$app = state.app,\n      auction = _state$app.auction,\n      isLiveOpen = _state$app.isLiveOpen,\n      isMobile = _state$app.isMobile,\n      liveAuctionUrl = _state$app.liveAuctionUrl;\n\n  var _auction$toJSON = auction.toJSON(),\n      cover_image = _auction$toJSON.cover_image,\n      end_at = _auction$toJSON.end_at,\n      is_auction = _auction$toJSON.is_auction,\n      is_closed = _auction$toJSON.is_closed,\n      name = _auction$toJSON.name;\n\n  var coverImage = (0, _lodash.default)(cover_image, 'cropped.url', '');\n  return {\n    auction: auction,\n    coverImage: coverImage,\n    hasEndTime: Boolean(end_at),\n    isAuction: is_auction,\n    isClosed: is_closed,\n    isLiveOpen: isLiveOpen,\n    isMobile: isMobile,\n    liveAuctionUrl: liveAuctionUrl,\n    name: name\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps)(Banner);\n\nexports.default = _default;\nvar test = {\n  Banner: Banner\n};\nexports.test = test;",{"version":3,"sources":["src/desktop/apps/auction/components/layout/Banner.js"],"names":["ClockView","Banner","props","auction","coverImage","hasEndTime","isAuction","isClosed","isLiveOpen","isMobile","liveAuctionUrl","name","trackEnterLive","window","analytics","track","type","label","flow","context_module","destination_path","replace","PREDICTION_URL","b","backgroundImage","propTypes","object","isRequired","string","bool","mapStateToProps","state","app","toJSON","cover_image","end_at","is_auction","is_closed","Boolean","test"],"mappings":"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","file":"/Users/eve/development/force/src/desktop/apps/auction/components/layout/Banner.js","sourceRoot":"/Users/eve/development/force","sourcesContent":["import _ClockView from 'desktop/components/clock/react'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport block from 'bem-cn-lite'\nimport get from 'lodash.get'\nimport { connect } from 'react-redux'\nimport { data as sd } from 'sharify'\n\n// FIXME: Rewire\nlet ClockView = _ClockView\n\nfunction Banner (props) {\n  const {\n    auction,\n    coverImage,\n    hasEndTime,\n    isAuction,\n    isClosed,\n    isLiveOpen,\n    isMobile,\n    liveAuctionUrl,\n    name\n  } = props\n\n  const trackEnterLive = () => {\n    window.analytics.track('click', {\n      type: 'button',\n      label: 'enter live auction',\n      flow: 'auctions',\n      context_module: 'auction banner',\n      destination_path: liveAuctionUrl.replace(sd.PREDICTION_URL, '')\n    })\n  }\n\n  const b = block('auction-Banner')\n  const type = isAuction ? 'Auction' : 'Sale'\n\n  return (\n    <div\n      className={b({ isClosed, isMobile, isLiveOpen })}\n      alt={name}\n    >\n      <div\n        className={b('background-image', { isClosed, isLiveOpen })}\n        style={{ backgroundImage: `url('${coverImage}')` }}\n      />\n      {(() => {\n        if (isLiveOpen && isAuction) {\n          return (\n            <div className={b('live-details')}>\n              <h1>\n                Live Bidding Now Open\n              </h1>\n\n              <a onClick={trackEnterLive} href={liveAuctionUrl} className='avant-garde-button-white'>\n                Enter live auction\n              </a>\n            </div>\n          )\n        } else if (isClosed) {\n          return (\n            <div className={b('closed')}>\n              <div>\n                {type} Closed\n              </div>\n            </div>\n          )\n        } else if (isAuction || hasEndTime) {\n          return (\n            <ClockView\n              model={auction}\n              modelName={type}\n              closedText={type + ' Closed'}\n            />\n          )\n        }\n      })()}\n    </div>\n  )\n}\n\nBanner.propTypes = {\n  auction: PropTypes.object.isRequired,\n  coverImage: PropTypes.string.isRequired,\n  hasEndTime: PropTypes.bool.isRequired,\n  isAuction: PropTypes.bool.isRequired,\n  isClosed: PropTypes.bool.isRequired,\n  isLiveOpen: PropTypes.bool.isRequired,\n  isMobile: PropTypes.bool.isRequired,\n  liveAuctionUrl: PropTypes.string,\n  name: PropTypes.string.isRequired\n}\n\nconst mapStateToProps = (state) => {\n  const {\n    auction,\n    isLiveOpen,\n    isMobile,\n    liveAuctionUrl\n  } = state.app\n\n  const { cover_image, end_at, is_auction, is_closed, name } = auction.toJSON()\n  const coverImage = get(cover_image, 'cropped.url', '')\n\n  return {\n    auction,\n    coverImage,\n    hasEndTime: Boolean(end_at),\n    isAuction: is_auction,\n    isClosed: is_closed,\n    isLiveOpen,\n    isMobile,\n    liveAuctionUrl,\n    name\n  }\n}\n\nexport default connect(\n  mapStateToProps\n)(Banner)\n\nexport const test = { Banner }\n"]}]}