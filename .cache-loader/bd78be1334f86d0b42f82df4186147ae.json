{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/components/react/utils/composeReducers.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/components/react/utils/composeReducers.js","mtime":1519227436000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n/**\n * Utility for taking multiple reducers and composing them together. Useful in\n * contexts where you want to break a large reducer switch up into little chunks\n * or \"merge\" a reducer from a separate component into a larger reducer state slice.\n *\n * @example\n *\n * import { combineReducers } from 'redux'\n * import { composeReducers } from 'components/react/utils/composeReducers'\n *\n * function reducerA(state, action) { ... }\n * function reducerB(state, action) { ... }\n *\n * const rootReducer = combineReducers({\n *   someAppState: composeReducers(reducerA, reducerB)\n * })\n *\n * @param  {Arguments} args Reducers to combine and iterate over\n * @return {Function} A reducer function that produces new state\n */\nexport function composeReducers() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return function (state, action) {\n    return args.reduce(function (update, arg) {\n      return arg(update, action);\n    }, state);\n  };\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(composeReducers, \"composeReducers\", \"/Users/eve/development/force/src/desktop/components/react/utils/composeReducers.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/components/react/utils/composeReducers.js"],"names":["composeReducers","args","state","action","reduce","update","arg"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,SAASA,eAAT,GAAkC;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACvC,SAAO,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACxB,WAAOF,IAAI,CAACG,MAAL,CAAY,UAACC,MAAD,EAASC,GAAT;AAAA,aAAiBA,GAAG,CAACD,MAAD,EAASF,MAAT,CAApB;AAAA,KAAZ,EAAkDD,KAAlD,CAAP;AACD,GAFD;AAGD;;;;;;;;;;;;0BAJeF,e","sourcesContent":["/**\n * Utility for taking multiple reducers and composing them together. Useful in\n * contexts where you want to break a large reducer switch up into little chunks\n * or \"merge\" a reducer from a separate component into a larger reducer state slice.\n *\n * @example\n *\n * import { combineReducers } from 'redux'\n * import { composeReducers } from 'components/react/utils/composeReducers'\n *\n * function reducerA(state, action) { ... }\n * function reducerB(state, action) { ... }\n *\n * const rootReducer = combineReducers({\n *   someAppState: composeReducers(reducerA, reducerB)\n * })\n *\n * @param  {Arguments} args Reducers to combine and iterate over\n * @return {Function} A reducer function that produces new state\n */\nexport function composeReducers(...args) {\n  return (state, action) => {\n    return args.reduce((update, arg) => arg(update, action), state)\n  }\n}\n"]}]}