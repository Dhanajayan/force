{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/components/react/utils/composeReducers.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/components/react/utils/composeReducers.js","mtime":1519227436000},{"path":"/Users/eve/development/force/.babelrc","mtime":1528124541000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.composeReducers = composeReducers;\n\n/**\n * Utility for taking multiple reducers and composing them together. Useful in\n * contexts where you want to break a large reducer switch up into little chunks\n * or \"merge\" a reducer from a separate component into a larger reducer state slice.\n *\n * @example\n *\n * import { combineReducers } from 'redux'\n * import { composeReducers } from 'components/react/utils/composeReducers'\n *\n * function reducerA(state, action) { ... }\n * function reducerB(state, action) { ... }\n *\n * const rootReducer = combineReducers({\n *   someAppState: composeReducers(reducerA, reducerB)\n * })\n *\n * @param  {Arguments} args Reducers to combine and iterate over\n * @return {Function} A reducer function that produces new state\n */\nfunction composeReducers() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return function (state, action) {\n    return args.reduce(function (update, arg) {\n      return arg(update, action);\n    }, state);\n  };\n}",{"version":3,"sources":["src/desktop/components/react/utils/composeReducers.js"],"names":["composeReducers","args","state","action","reduce","update","arg"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBO,SAASA,eAAT,GAAkC;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AACvC,SAAO,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACxB,WAAOF,KAAKG,MAAL,CAAY,UAACC,MAAD,EAASC,GAAT;AAAA,aAAiBA,IAAID,MAAJ,EAAYF,MAAZ,CAAjB;AAAA,KAAZ,EAAkDD,KAAlD,CAAP;AACD,GAFD;AAGD","file":"/Users/eve/development/force/src/desktop/components/react/utils/composeReducers.js","sourceRoot":"/Users/eve/development/force","sourcesContent":["/**\n * Utility for taking multiple reducers and composing them together. Useful in\n * contexts where you want to break a large reducer switch up into little chunks\n * or \"merge\" a reducer from a separate component into a larger reducer state slice.\n *\n * @example\n *\n * import { combineReducers } from 'redux'\n * import { composeReducers } from 'components/react/utils/composeReducers'\n *\n * function reducerA(state, action) { ... }\n * function reducerB(state, action) { ... }\n *\n * const rootReducer = combineReducers({\n *   someAppState: composeReducers(reducerA, reducerB)\n * })\n *\n * @param  {Arguments} args Reducers to combine and iterate over\n * @return {Function} A reducer function that produces new state\n */\nexport function composeReducers(...args) {\n  return (state, action) => {\n    return args.reduce((update, arg) => arg(update, action), state)\n  }\n}\n"]}]}