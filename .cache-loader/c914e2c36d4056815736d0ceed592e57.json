{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/components/react/masonry_grid/MasonryGrid.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/components/react/masonry_grid/MasonryGrid.js","mtime":1519227436000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport _ from 'underscore';\nimport styled from 'styled-components';\nimport { Reveal } from \"./Reveal\";\n\nvar MasonryGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MasonryGrid, _Component);\n\n  function MasonryGrid() {\n    _classCallCheck(this, MasonryGrid);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MasonryGrid).apply(this, arguments));\n  }\n\n  _createClass(MasonryGrid, [{\n    key: \"createGrid\",\n    value: function createGrid() {\n      var _this$props = this.props,\n          items = _this$props.items,\n          columnCount = _this$props.columnCount,\n          getAspectRatio = _this$props.getAspectRatio;\n      var grid = [];\n      var gridRatioSums = [];\n\n      _(columnCount).times(function () {\n        grid.push([]);\n        gridRatioSums.push(0);\n      });\n\n      items.forEach(function (artwork) {\n        // Find section with lowest *inverted* aspect ratio sum, which is the\n        // shortest column.\n        var lowestRatioSum = Number.MAX_VALUE;\n        var sectionIndex = null;\n        gridRatioSums.forEach(function (ratioSum, j) {\n          if (ratioSum < lowestRatioSum) {\n            sectionIndex = j;\n            lowestRatioSum = ratioSum;\n          }\n        });\n\n        if (sectionIndex != null) {\n          var section = grid[sectionIndex];\n          section.push(artwork); // Keep track of total section aspect ratio\n\n          var aspectRatio = getAspectRatio(artwork) || 1; // Ensure we never divide by null/0\n          // Invert the aspect ratio so that a lower value means a shorter section.\n\n          gridRatioSums[sectionIndex] += 1 / aspectRatio;\n        }\n      });\n      return grid;\n    }\n  }, {\n    key: \"renderItems\",\n    value: function renderItems() {\n      var _this$props2 = this.props,\n          items = _this$props2.items,\n          columnCount = _this$props2.columnCount,\n          columnMargin = _this$props2.columnMargin,\n          getDisplayComponent = _this$props2.getDisplayComponent,\n          rowMargin = _this$props2.rowMargin;\n      var grid = this.createGrid(items, columnCount);\n      var sections = [];\n\n      _(columnCount).times(function (i) {\n        var displayComponents = [];\n        var rows = grid[i];\n        rows.forEach(function (row, j) {\n          var artwork = grid[i][j];\n          displayComponents.push(React.createElement(\"div\", {\n            key: \"column-\".concat(i, \"-row-\").concat(j)\n          }, getDisplayComponent(artwork))); // Setting a marginBottom on the artwork component didnâ€™t work, so using\n          // a spacer view instead.\n\n          var addSpacer = j < rows.length - 1;\n\n          if (addSpacer) {\n            displayComponents.push(React.createElement(\"div\", {\n              className: \"grid-item\",\n              style: {\n                height: columnMargin\n              },\n              key: \"column-\".concat(i, \"-spacer-\").concat(j)\n            }));\n          }\n        });\n        var isLastColumn = i === columnCount - 1;\n        sections.push(React.createElement(\"div\", {\n          style: {\n            flex: 1,\n            minWidth: 0,\n            marginRight: isLastColumn ? 0 : rowMargin\n          },\n          key: i\n        }, displayComponents));\n      });\n\n      return sections;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          className = _this$props3.className,\n          items = _this$props3.items,\n          mask = _this$props3.mask,\n          style = _this$props3.style,\n          title = _this$props3.title;\n      var isRevealExpanded = mask && items.length <= 2;\n      return React.createElement(Container, null, React.createElement(Reveal, {\n        isEnabled: mask,\n        isExpanded: isRevealExpanded\n      }, title && React.createElement(Title, null, title), React.createElement(\"div\", {\n        className: className,\n        style: _objectSpread({\n          display: 'flex',\n          flexDirection: 'row',\n          flexWrap: 'wrap'\n        }, style)\n      }, this.renderItems())));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    value: function __reactstandin__regenerateByEval(key, code) {\n      this[key] = eval(code);\n    }\n  }]);\n\n  return MasonryGrid;\n}(Component); // margin-bottom: 40px;\n\n\n_defineProperty(MasonryGrid, \"propTypes\", {\n  items: PropTypes.array,\n  className: PropTypes.string,\n  columnCount: PropTypes.number,\n  columnMargin: PropTypes.number,\n  getDisplayComponent: PropTypes.func.isRequired,\n  getAspectRatio: PropTypes.func.isRequired,\n  mask: PropTypes.bool,\n  rowMargin: PropTypes.number,\n  style: PropTypes.object,\n  title: PropTypes.string\n});\n\n_defineProperty(MasonryGrid, \"defaultProps\", {\n  items: [],\n  className: '',\n  columnCount: 3,\n  columnMargin: 20,\n  mask: false,\n  rowMargin: 20,\n  style: {}\n});\n\nexport { MasonryGrid as default };\nvar Container =\n/*#__PURE__*/\nstyled.div.withConfig({\n  displayName: \"MasonryGrid__Container\",\n  componentId: \"s1k3jqo3-0\"\n})([\"a{text-decoration:none;}\"]);\nvar Title =\n/*#__PURE__*/\nstyled.div.withConfig({\n  displayName: \"MasonryGrid__Title\",\n  componentId: \"s1k3jqo3-1\"\n})([\"font-size:20px;margin-bottom:20px;\"]);\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(MasonryGrid, \"MasonryGrid\", \"/Users/eve/development/force/src/desktop/components/react/masonry_grid/MasonryGrid.js\");\n  reactHotLoader.register(Container, \"Container\", \"/Users/eve/development/force/src/desktop/components/react/masonry_grid/MasonryGrid.js\");\n  reactHotLoader.register(Title, \"Title\", \"/Users/eve/development/force/src/desktop/components/react/masonry_grid/MasonryGrid.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/components/react/masonry_grid/MasonryGrid.js"],"names":["PropTypes","React","Component","_","styled","Reveal","MasonryGrid","props","items","columnCount","getAspectRatio","grid","gridRatioSums","times","push","forEach","artwork","lowestRatioSum","Number","MAX_VALUE","sectionIndex","ratioSum","j","section","aspectRatio","columnMargin","getDisplayComponent","rowMargin","createGrid","sections","i","displayComponents","rows","row","addSpacer","length","height","isLastColumn","flex","minWidth","marginRight","className","mask","style","title","isRevealExpanded","display","flexDirection","flexWrap","renderItems","array","string","number","func","isRequired","bool","object","Container","div","Title"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport _ from 'underscore'\nimport styled from 'styled-components'\nimport { Reveal } from './Reveal'\n\nexport default class MasonryGrid extends Component {\n  static propTypes = {\n    items: PropTypes.array,\n    className: PropTypes.string,\n    columnCount: PropTypes.number,\n    columnMargin: PropTypes.number,\n    getDisplayComponent: PropTypes.func.isRequired,\n    getAspectRatio: PropTypes.func.isRequired,\n    mask: PropTypes.bool,\n    rowMargin: PropTypes.number,\n    style: PropTypes.object,\n    title: PropTypes.string,\n  }\n\n  static defaultProps = {\n    items: [],\n    className: '',\n    columnCount: 3,\n    columnMargin: 20,\n    mask: false,\n    rowMargin: 20,\n    style: {},\n  }\n\n  createGrid() {\n    const { items, columnCount, getAspectRatio } = this.props\n    const grid = []\n    const gridRatioSums = []\n\n    _(columnCount).times(() => {\n      grid.push([])\n      gridRatioSums.push(0)\n    })\n\n    items.forEach((artwork) => {\n      // Find section with lowest *inverted* aspect ratio sum, which is the\n      // shortest column.\n      let lowestRatioSum = Number.MAX_VALUE\n      let sectionIndex = null\n\n      gridRatioSums.forEach((ratioSum, j) => {\n        if (ratioSum < lowestRatioSum) {\n          sectionIndex = j\n          lowestRatioSum = ratioSum\n        }\n      })\n\n      if (sectionIndex != null) {\n        const section = grid[sectionIndex]\n        section.push(artwork)\n\n        // Keep track of total section aspect ratio\n        const aspectRatio = getAspectRatio(artwork) || 1 // Ensure we never divide by null/0\n\n        // Invert the aspect ratio so that a lower value means a shorter section.\n        gridRatioSums[sectionIndex] += 1 / aspectRatio\n      }\n    })\n\n    return grid\n  }\n\n  renderItems() {\n    const {\n      items,\n      columnCount,\n      columnMargin,\n      getDisplayComponent,\n      rowMargin,\n    } = this.props\n\n    const grid = this.createGrid(items, columnCount)\n    const sections = []\n\n    _(columnCount).times((i) => {\n      const displayComponents = []\n      const rows = grid[i]\n\n      rows.forEach((row, j) => {\n        const artwork = grid[i][j]\n\n        displayComponents.push(\n          <div key={`column-${i}-row-${j}`}>{getDisplayComponent(artwork)}</div>\n        )\n\n        // Setting a marginBottom on the artwork component didnâ€™t work, so using\n        // a spacer view instead.\n        const addSpacer = j < rows.length - 1\n\n        if (addSpacer) {\n          displayComponents.push(\n            <div\n              className=\"grid-item\"\n              style={{\n                height: columnMargin,\n              }}\n              key={`column-${i}-spacer-${j}`}\n            />\n          )\n        }\n      })\n\n      const isLastColumn = i === columnCount - 1\n\n      sections.push(\n        <div\n          style={{\n            flex: 1,\n            minWidth: 0,\n            marginRight: isLastColumn ? 0 : rowMargin,\n          }}\n          key={i}\n        >\n          {displayComponents}\n        </div>\n      )\n    })\n\n    return sections\n  }\n\n  render() {\n    const { className, items, mask, style, title } = this.props\n    const isRevealExpanded = mask && items.length <= 2\n\n    return (\n      <Container>\n        <Reveal isEnabled={mask} isExpanded={isRevealExpanded}>\n          {title && <Title>{title}</Title>}\n\n          <div\n            className={className}\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              flexWrap: 'wrap',\n              ...style,\n            }}\n          >\n            {this.renderItems()}\n          </div>\n        </Reveal>\n      </Container>\n    )\n  }\n}\n\n// margin-bottom: 40px;\nconst Container = styled.div`\n  a {\n    text-decoration: none;\n  }\n`\n\nconst Title = styled.div`\n  font-size: 20px;\n  margin-bottom: 20px;\n`\n"]}]}