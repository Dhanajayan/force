{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/utils/domain/auctions/urls.js","dependencies":[{"path":"/Users/eve/development/force/src/utils/domain/auctions/urls.js","mtime":1519227436000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nvar sd = require('sharify').data;\n/**\n * Get the live auction url with /login appended when a user is present\n *\n * @param {String} id - auction id/slug\n * @param {Object} [options]\n * @param {Boolean} [options.isLoggedIn] - whether there is a user present\n * @return {String} live auction url\n */\n\n\nexport var getLiveAuctionUrl = function getLiveAuctionUrl(id) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var liveAuctionRoot = sd.PREDICTION_URL;\n  var url = \"\".concat(liveAuctionRoot, \"/\").concat(id);\n\n  if (options.isLoggedIn) {\n    return \"\".concat(url, \"/login\");\n  } else {\n    return url;\n  }\n};\n/**\n * For `/artwork/:slug` routes that are a part of an auction, determine the\n * correct url to redirect to when clicking the \"Bid\" button.\n *\n * @param  {String} bidderStatus\n * @param  {Object} artwork\n * @param  {Object} auction\n * @return {String}\n */\n\nexport function getBidRedirectActionUrl(bidderStatus, artwork, auction) {\n  if (bidderStatus === 'logged-out' || bidderStatus === 'qualified-to-bid') {\n    return \"/auction/\".concat(auction.id, \"/bid/\").concat(artwork.id);\n  } else {\n    return \"/artwork/\".concat(artwork.id);\n  }\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(sd, \"sd\", \"/Users/eve/development/force/src/utils/domain/auctions/urls.js\");\n  reactHotLoader.register(getLiveAuctionUrl, \"getLiveAuctionUrl\", \"/Users/eve/development/force/src/utils/domain/auctions/urls.js\");\n  reactHotLoader.register(getBidRedirectActionUrl, \"getBidRedirectActionUrl\", \"/Users/eve/development/force/src/utils/domain/auctions/urls.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/utils/domain/auctions/urls.js"],"names":["sd","require","data","getLiveAuctionUrl","id","options","liveAuctionRoot","PREDICTION_URL","url","isLoggedIn","getBidRedirectActionUrl","bidderStatus","artwork","auction"],"mappings":";;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,IAA9B;AAEA;;;;;;;;;;AAQA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,EAAD,EAAsB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AACrD,MAAMC,eAAe,GAAGN,EAAE,CAACO,cAA3B;AACA,MAAMC,GAAG,aAAMF,eAAN,cAAyBF,EAAzB,CAAT;;AACA,MAAIC,OAAO,CAACI,UAAZ,EAAwB;AACtB,qBAAUD,GAAV;AACD,GAFD,MAEO;AACL,WAAOA,GAAP;AACD;AACF,CARM;AAUP;;;;;;;;;;AASA,OAAO,SAASE,uBAAT,CAAiCC,YAAjC,EAA+CC,OAA/C,EAAwDC,OAAxD,EAAiE;AACtE,MAAIF,YAAY,KAAK,YAAjB,IAAiCA,YAAY,KAAK,kBAAtD,EAA0E;AACxE,8BAAmBE,OAAO,CAACT,EAA3B,kBAAqCQ,OAAO,CAACR,EAA7C;AACD,GAFD,MAEO;AACL,8BAAmBQ,OAAO,CAACR,EAA3B;AACD;AACF;;;;;;;;;;;;0BAnCKJ,E;0BAUOG,iB;0BAmBGO,uB","sourcesContent":["const sd = require('sharify').data\n\n/**\n * Get the live auction url with /login appended when a user is present\n *\n * @param {String} id - auction id/slug\n * @param {Object} [options]\n * @param {Boolean} [options.isLoggedIn] - whether there is a user present\n * @return {String} live auction url\n */\nexport const getLiveAuctionUrl = (id, options = {}) => {\n  const liveAuctionRoot = sd.PREDICTION_URL\n  const url = `${liveAuctionRoot}/${id}`\n  if (options.isLoggedIn) {\n    return `${url}/login`\n  } else {\n    return url\n  }\n}\n\n/**\n * For `/artwork/:slug` routes that are a part of an auction, determine the\n * correct url to redirect to when clicking the \"Bid\" button.\n *\n * @param  {String} bidderStatus\n * @param  {Object} artwork\n * @param  {Object} auction\n * @return {String}\n */\nexport function getBidRedirectActionUrl(bidderStatus, artwork, auction) {\n  if (bidderStatus === 'logged-out' || bidderStatus === 'qualified-to-bid') {\n    return `/auction/${auction.id}/bid/${artwork.id}`\n  } else {\n    return `/artwork/${artwork.id}`\n  }\n}\n"]}]}