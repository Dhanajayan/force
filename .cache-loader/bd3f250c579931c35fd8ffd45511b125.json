{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/consign/components/forgot_password/index.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/consign/components/forgot_password/index.js","mtime":1519227436000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport block from 'bem-cn-lite';\nimport { Field, reduxForm } from 'redux-form';\nimport { compose } from 'underscore';\nimport { connect } from 'react-redux';\nimport { renderTextInput } from \"../text_input\";\nimport { resetPassword, updateAuthFormStateAndClearError } from \"../../client/actions\";\n\nfunction validate(values) {\n  var email = values.email;\n  var errors = {};\n  if (!email) errors.email = 'Required';\n  return errors;\n}\n\nfunction ForgotPassword(props) {\n  var error = props.error,\n      handleSubmit = props.handleSubmit,\n      invalid = props.invalid,\n      pristine = props.pristine,\n      resetPasswordAction = props.resetPasswordAction,\n      resetPasswordSuccess = props.resetPasswordSuccess,\n      updateAuthFormStateAndClearErrorAction = props.updateAuthFormStateAndClearErrorAction;\n  var b = block('consignments-submission-forgot-password');\n  return React.createElement(\"div\", {\n    className: b()\n  }, React.createElement(\"div\", {\n    className: b('title')\n  }, \"Enter the email address associated with your account\"), React.createElement(\"div\", {\n    className: b('subtitle')\n  }, \"New to Artsy? \", React.createElement(\"span\", {\n    className: b('clickable'),\n    onClick: function onClick() {\n      return updateAuthFormStateAndClearErrorAction('signUp');\n    }\n  }, \"Sign up\"), \".\"), React.createElement(\"form\", {\n    className: b('form'),\n    onSubmit: handleSubmit(resetPasswordAction)\n  }, React.createElement(\"div\", {\n    className: b('row')\n  }, React.createElement(\"div\", {\n    className: b('row-item')\n  }, React.createElement(Field, {\n    name: \"email\",\n    component: renderTextInput,\n    item: 'email',\n    label: 'Email',\n    autofocus: true\n  }))), React.createElement(\"button\", {\n    className: b.builder()('reset-password-button').mix('avant-garde-button-black')(),\n    disabled: pristine || invalid,\n    type: \"submit\"\n  }, \"Reset Password\"), error && React.createElement(\"div\", {\n    className: b('error')\n  }, error), resetPasswordSuccess && React.createElement(\"div\", {\n    className: b('success')\n  }, \"Instructions on how to reset your password have been sent.\")));\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    categoryOptions: state.submissionFlow.categoryOptions,\n    error: state.submissionFlow.error,\n    locationAutocompleteSuggestions: state.submissionFlow.locationAutocompleteSuggestions,\n    locationAutocompleteValue: state.submissionFlow.locationAutocompleteValue,\n    resetPasswordSuccess: state.submissionFlow.resetPasswordSuccess\n  };\n};\n\nvar mapDispatchToProps = {\n  resetPasswordAction: resetPassword,\n  updateAuthFormStateAndClearErrorAction: updateAuthFormStateAndClearError\n};\nForgotPassword.propTypes = {\n  error: PropTypes.string,\n  handleSubmit: PropTypes.func.isRequired,\n  invalid: PropTypes.bool,\n  pristine: PropTypes.bool,\n  resetPasswordAction: PropTypes.func.isRequired,\n  resetPasswordSuccess: PropTypes.bool.isRequired,\n  updateAuthFormStateAndClearErrorAction: PropTypes.func.isRequired\n};\n\nvar _default = compose(reduxForm({\n  form: 'forgotPassword',\n  // a unique identifier for this form\n  validate: validate\n}), connect(mapStateToProps, mapDispatchToProps))(ForgotPassword);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(validate, \"validate\", \"/Users/eve/development/force/src/desktop/apps/consign/components/forgot_password/index.js\");\n  reactHotLoader.register(ForgotPassword, \"ForgotPassword\", \"/Users/eve/development/force/src/desktop/apps/consign/components/forgot_password/index.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/Users/eve/development/force/src/desktop/apps/consign/components/forgot_password/index.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/Users/eve/development/force/src/desktop/apps/consign/components/forgot_password/index.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/eve/development/force/src/desktop/apps/consign/components/forgot_password/index.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/apps/consign/components/forgot_password/index.js"],"names":["PropTypes","React","block","Field","reduxForm","compose","connect","renderTextInput","resetPassword","updateAuthFormStateAndClearError","validate","values","email","errors","ForgotPassword","props","error","handleSubmit","invalid","pristine","resetPasswordAction","resetPasswordSuccess","updateAuthFormStateAndClearErrorAction","b","builder","mix","mapStateToProps","state","categoryOptions","submissionFlow","locationAutocompleteSuggestions","locationAutocompleteValue","mapDispatchToProps","propTypes","string","func","isRequired","bool","form"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\nimport block from 'bem-cn-lite'\nimport { Field, reduxForm } from 'redux-form'\nimport { compose } from 'underscore'\nimport { connect } from 'react-redux'\nimport { renderTextInput } from '../text_input'\nimport {\n  resetPassword,\n  updateAuthFormStateAndClearError\n} from '../../client/actions'\n\nfunction validate (values) {\n  const {\n    email\n  } = values\n  const errors = {}\n\n  if (!email) errors.email = 'Required'\n  return errors\n}\n\nfunction ForgotPassword (props) {\n  const {\n    error,\n    handleSubmit,\n    invalid,\n    pristine,\n    resetPasswordAction,\n    resetPasswordSuccess,\n    updateAuthFormStateAndClearErrorAction\n  } = props\n\n  const b = block('consignments-submission-forgot-password')\n\n  return (\n    <div className={b()}>\n      <div className={b('title')}>\n        Enter the email address associated with your account\n      </div>\n      <div className={b('subtitle')}>\n        New to Artsy? <span className={b('clickable')} onClick={() => updateAuthFormStateAndClearErrorAction('signUp')}>Sign up</span>.\n      </div>\n      <form className={b('form')} onSubmit={handleSubmit(resetPasswordAction)}>\n        <div className={b('row')}>\n          <div className={b('row-item')}>\n            <Field name='email' component={renderTextInput}\n              item={'email'}\n              label={'Email'}\n              autofocus\n            />\n          </div>\n        </div>\n        <button\n          className={b.builder()('reset-password-button').mix('avant-garde-button-black')()}\n          disabled={pristine || invalid}\n          type='submit'\n        >\n          Reset Password\n        </button>\n        {\n          error && <div className={b('error')}>{error}</div>\n        }\n        {\n          resetPasswordSuccess && (\n            <div className={b('success')}>\n              Instructions on how to reset your password have been sent.\n            </div>\n          )\n        }\n      </form>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    categoryOptions: state.submissionFlow.categoryOptions,\n    error: state.submissionFlow.error,\n    locationAutocompleteSuggestions: state.submissionFlow.locationAutocompleteSuggestions,\n    locationAutocompleteValue: state.submissionFlow.locationAutocompleteValue,\n    resetPasswordSuccess: state.submissionFlow.resetPasswordSuccess\n  }\n}\n\nconst mapDispatchToProps = {\n  resetPasswordAction: resetPassword,\n  updateAuthFormStateAndClearErrorAction: updateAuthFormStateAndClearError\n}\n\nForgotPassword.propTypes = {\n  error: PropTypes.string,\n  handleSubmit: PropTypes.func.isRequired,\n  invalid: PropTypes.bool,\n  pristine: PropTypes.bool,\n  resetPasswordAction: PropTypes.func.isRequired,\n  resetPasswordSuccess: PropTypes.bool.isRequired,\n  updateAuthFormStateAndClearErrorAction: PropTypes.func.isRequired\n}\n\nexport default compose(\n  reduxForm({\n    form: 'forgotPassword', // a unique identifier for this form\n    validate\n  }),\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(ForgotPassword)\n"]}]}