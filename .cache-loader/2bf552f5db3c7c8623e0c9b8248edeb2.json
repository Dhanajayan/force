{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/components/react/masonry_grid/MasonryGrid.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/components/react/masonry_grid/MasonryGrid.js","mtime":1519227436000},{"path":"/Users/eve/development/force/.babelrc","mtime":1528124541000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime/core-js/object/get-prototype-of\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _Reveal = require(\"./Reveal\");\n\nvar MasonryGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2.default)(MasonryGrid, _Component);\n\n  function MasonryGrid() {\n    (0, _classCallCheck2.default)(this, MasonryGrid);\n    return (0, _possibleConstructorReturn2.default)(this, (MasonryGrid.__proto__ || (0, _getPrototypeOf.default)(MasonryGrid)).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(MasonryGrid, [{\n    key: \"createGrid\",\n    value: function createGrid() {\n      var _props = this.props,\n          items = _props.items,\n          columnCount = _props.columnCount,\n          getAspectRatio = _props.getAspectRatio;\n      var grid = [];\n      var gridRatioSums = [];\n      (0, _underscore.default)(columnCount).times(function () {\n        grid.push([]);\n        gridRatioSums.push(0);\n      });\n      items.forEach(function (artwork) {\n        // Find section with lowest *inverted* aspect ratio sum, which is the\n        // shortest column.\n        var lowestRatioSum = Number.MAX_VALUE;\n        var sectionIndex = null;\n        gridRatioSums.forEach(function (ratioSum, j) {\n          if (ratioSum < lowestRatioSum) {\n            sectionIndex = j;\n            lowestRatioSum = ratioSum;\n          }\n        });\n\n        if (sectionIndex != null) {\n          var section = grid[sectionIndex];\n          section.push(artwork); // Keep track of total section aspect ratio\n\n          var aspectRatio = getAspectRatio(artwork) || 1; // Ensure we never divide by null/0\n          // Invert the aspect ratio so that a lower value means a shorter section.\n\n          gridRatioSums[sectionIndex] += 1 / aspectRatio;\n        }\n      });\n      return grid;\n    }\n  }, {\n    key: \"renderItems\",\n    value: function renderItems() {\n      var _props2 = this.props,\n          items = _props2.items,\n          columnCount = _props2.columnCount,\n          columnMargin = _props2.columnMargin,\n          getDisplayComponent = _props2.getDisplayComponent,\n          rowMargin = _props2.rowMargin;\n      var grid = this.createGrid(items, columnCount);\n      var sections = [];\n      (0, _underscore.default)(columnCount).times(function (i) {\n        var displayComponents = [];\n        var rows = grid[i];\n        rows.forEach(function (row, j) {\n          var artwork = grid[i][j];\n          displayComponents.push(_react.default.createElement(\"div\", {\n            key: \"column-\".concat(i, \"-row-\").concat(j)\n          }, getDisplayComponent(artwork))); // Setting a marginBottom on the artwork component didnâ€™t work, so using\n          // a spacer view instead.\n\n          var addSpacer = j < rows.length - 1;\n\n          if (addSpacer) {\n            displayComponents.push(_react.default.createElement(\"div\", {\n              className: \"grid-item\",\n              style: {\n                height: columnMargin\n              },\n              key: \"column-\".concat(i, \"-spacer-\").concat(j)\n            }));\n          }\n        });\n        var isLastColumn = i === columnCount - 1;\n        sections.push(_react.default.createElement(\"div\", {\n          style: {\n            flex: 1,\n            minWidth: 0,\n            marginRight: isLastColumn ? 0 : rowMargin\n          },\n          key: i\n        }, displayComponents));\n      });\n      return sections;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props3 = this.props,\n          className = _props3.className,\n          items = _props3.items,\n          mask = _props3.mask,\n          style = _props3.style,\n          title = _props3.title;\n      var isRevealExpanded = mask && items.length <= 2;\n      return _react.default.createElement(Container, null, _react.default.createElement(_Reveal.Reveal, {\n        isEnabled: mask,\n        isExpanded: isRevealExpanded\n      }, title && _react.default.createElement(Title, null, title), _react.default.createElement(\"div\", {\n        className: className,\n        style: (0, _extends2.default)({\n          display: 'flex',\n          flexDirection: 'row',\n          flexWrap: 'wrap'\n        }, style)\n      }, this.renderItems())));\n    }\n  }]);\n  return MasonryGrid;\n}(_react.Component); // margin-bottom: 40px;\n\n\nexports.default = MasonryGrid;\nObject.defineProperty(MasonryGrid, \"propTypes\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    items: _propTypes.default.array,\n    className: _propTypes.default.string,\n    columnCount: _propTypes.default.number,\n    columnMargin: _propTypes.default.number,\n    getDisplayComponent: _propTypes.default.func.isRequired,\n    getAspectRatio: _propTypes.default.func.isRequired,\n    mask: _propTypes.default.bool,\n    rowMargin: _propTypes.default.number,\n    style: _propTypes.default.object,\n    title: _propTypes.default.string\n  }\n});\nObject.defineProperty(MasonryGrid, \"defaultProps\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    items: [],\n    className: '',\n    columnCount: 3,\n    columnMargin: 20,\n    mask: false,\n    rowMargin: 20,\n    style: {}\n  }\n});\n\nvar Container =\n/*#__PURE__*/\n_styledComponents.default.div.withConfig({\n  displayName: \"MasonryGrid__Container\",\n  componentId: \"s1k3jqo3-0\"\n})([\"a{text-decoration:none;}\"]);\n\nvar Title =\n/*#__PURE__*/\n_styledComponents.default.div.withConfig({\n  displayName: \"MasonryGrid__Title\",\n  componentId: \"s1k3jqo3-1\"\n})([\"font-size:20px;margin-bottom:20px;\"]);",{"version":3,"sources":["src/desktop/components/react/masonry_grid/MasonryGrid.js"],"names":["MasonryGrid","props","items","columnCount","getAspectRatio","grid","gridRatioSums","times","push","forEach","artwork","lowestRatioSum","Number","MAX_VALUE","sectionIndex","ratioSum","j","section","aspectRatio","columnMargin","getDisplayComponent","rowMargin","createGrid","sections","i","displayComponents","rows","row","addSpacer","length","height","isLastColumn","flex","minWidth","marginRight","className","mask","style","title","isRevealExpanded","display","flexDirection","flexWrap","renderItems","array","string","number","func","isRequired","bool","object","Container","div","Title"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;IAEqBA,W;;;;;;;;;;;;iCAwBN;AAAA,mBACoC,KAAKC,KADzC;AAAA,UACHC,KADG,UACHA,KADG;AAAA,UACIC,WADJ,UACIA,WADJ;AAAA,UACiBC,cADjB,UACiBA,cADjB;AAEX,UAAMC,OAAO,EAAb;AACA,UAAMC,gBAAgB,EAAtB;AAEA,+BAAEH,WAAF,EAAeI,KAAf,CAAqB,YAAM;AACzBF,aAAKG,IAAL,CAAU,EAAV;AACAF,sBAAcE,IAAd,CAAmB,CAAnB;AACD,OAHD;AAKAN,YAAMO,OAAN,CAAc,UAACC,OAAD,EAAa;AACzB;AACA;AACA,YAAIC,iBAAiBC,OAAOC,SAA5B;AACA,YAAIC,eAAe,IAAnB;AAEAR,sBAAcG,OAAd,CAAsB,UAACM,QAAD,EAAWC,CAAX,EAAiB;AACrC,cAAID,WAAWJ,cAAf,EAA+B;AAC7BG,2BAAeE,CAAf;AACAL,6BAAiBI,QAAjB;AACD;AACF,SALD;;AAOA,YAAID,gBAAgB,IAApB,EAA0B;AACxB,cAAMG,UAAUZ,KAAKS,YAAL,CAAhB;AACAG,kBAAQT,IAAR,CAAaE,OAAb,EAFwB,CAIxB;;AACA,cAAMQ,cAAcd,eAAeM,OAAf,KAA2B,CAA/C,CALwB,CAKyB;AAEjD;;AACAJ,wBAAcQ,YAAd,KAA+B,IAAII,WAAnC;AACD;AACF,OAvBD;AAyBA,aAAOb,IAAP;AACD;;;kCAEa;AAAA,oBAOR,KAAKJ,KAPG;AAAA,UAEVC,KAFU,WAEVA,KAFU;AAAA,UAGVC,WAHU,WAGVA,WAHU;AAAA,UAIVgB,YAJU,WAIVA,YAJU;AAAA,UAKVC,mBALU,WAKVA,mBALU;AAAA,UAMVC,SANU,WAMVA,SANU;AASZ,UAAMhB,OAAO,KAAKiB,UAAL,CAAgBpB,KAAhB,EAAuBC,WAAvB,CAAb;AACA,UAAMoB,WAAW,EAAjB;AAEA,+BAAEpB,WAAF,EAAeI,KAAf,CAAqB,UAACiB,CAAD,EAAO;AAC1B,YAAMC,oBAAoB,EAA1B;AACA,YAAMC,OAAOrB,KAAKmB,CAAL,CAAb;AAEAE,aAAKjB,OAAL,CAAa,UAACkB,GAAD,EAAMX,CAAN,EAAY;AACvB,cAAMN,UAAUL,KAAKmB,CAAL,EAAQR,CAAR,CAAhB;AAEAS,4BAAkBjB,IAAlB,CACE;AAAK,kCAAegB,CAAf,kBAAwBR,CAAxB;AAAL,aAAmCI,oBAAoBV,OAApB,CAAnC,CADF,EAHuB,CAOvB;AACA;;AACA,cAAMkB,YAAYZ,IAAIU,KAAKG,MAAL,GAAc,CAApC;;AAEA,cAAID,SAAJ,EAAe;AACbH,8BAAkBjB,IAAlB,CACE;AACE,yBAAU,WADZ;AAEE,qBAAO;AACLsB,wBAAQX;AADH,eAFT;AAKE,oCAAeK,CAAf,qBAA2BR,CAA3B;AALF,cADF;AASD;AACF,SAtBD;AAwBA,YAAMe,eAAeP,MAAMrB,cAAc,CAAzC;AAEAoB,iBAASf,IAAT,CACE;AACE,iBAAO;AACLwB,kBAAM,CADD;AAELC,sBAAU,CAFL;AAGLC,yBAAaH,eAAe,CAAf,GAAmBV;AAH3B,WADT;AAME,eAAKG;AANP,WAQGC,iBARH,CADF;AAYD,OA1CD;AA4CA,aAAOF,QAAP;AACD;;;6BAEQ;AAAA,oBAC0C,KAAKtB,KAD/C;AAAA,UACCkC,SADD,WACCA,SADD;AAAA,UACYjC,KADZ,WACYA,KADZ;AAAA,UACmBkC,IADnB,WACmBA,IADnB;AAAA,UACyBC,KADzB,WACyBA,KADzB;AAAA,UACgCC,KADhC,WACgCA,KADhC;AAEP,UAAMC,mBAAmBH,QAAQlC,MAAM2B,MAAN,IAAgB,CAAjD;AAEA,aACE,6BAAC,SAAD,QACE;AAAQ,mBAAWO,IAAnB;AAAyB,oBAAYG;AAArC,SACGD,SAAS,6BAAC,KAAD,QAAQA,KAAR,CADZ,EAGE;AACE,mBAAWH,SADb;AAEE;AACEK,mBAAS,MADX;AAEEC,yBAAe,KAFjB;AAGEC,oBAAU;AAHZ,WAIKL,KAJL;AAFF,SASG,KAAKM,WAAL,EATH,CAHF,CADF,CADF;AAmBD;;;qBAGH;;;;sBAnJqB3C,W;;;;SACA;AACjBE,WAAO,mBAAU0C,KADA;AAEjBT,eAAW,mBAAUU,MAFJ;AAGjB1C,iBAAa,mBAAU2C,MAHN;AAIjB3B,kBAAc,mBAAU2B,MAJP;AAKjB1B,yBAAqB,mBAAU2B,IAAV,CAAeC,UALnB;AAMjB5C,oBAAgB,mBAAU2C,IAAV,CAAeC,UANd;AAOjBZ,UAAM,mBAAUa,IAPC;AAQjB5B,eAAW,mBAAUyB,MARJ;AASjBT,WAAO,mBAAUa,MATA;AAUjBZ,WAAO,mBAAUO;AAVA;;sBADA7C,W;;;;SAcG;AACpBE,WAAO,EADa;AAEpBiC,eAAW,EAFS;AAGpBhC,iBAAa,CAHO;AAIpBgB,kBAAc,EAJM;AAKpBiB,UAAM,KALc;AAMpBf,eAAW,EANS;AAOpBgB,WAAO;AAPa;;;AAsIxB,IAAMc;AAAA;AAAY,0BAAOC,GAAnB;AAAA;AAAA;AAAA,gCAAN;;AAMA,IAAMC;AAAA;AAAQ,0BAAOD,GAAf;AAAA;AAAA;AAAA,0CAAN","file":"/Users/eve/development/force/src/desktop/components/react/masonry_grid/MasonryGrid.js","sourceRoot":"/Users/eve/development/force","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport _ from 'underscore'\nimport styled from 'styled-components'\nimport { Reveal } from './Reveal'\n\nexport default class MasonryGrid extends Component {\n  static propTypes = {\n    items: PropTypes.array,\n    className: PropTypes.string,\n    columnCount: PropTypes.number,\n    columnMargin: PropTypes.number,\n    getDisplayComponent: PropTypes.func.isRequired,\n    getAspectRatio: PropTypes.func.isRequired,\n    mask: PropTypes.bool,\n    rowMargin: PropTypes.number,\n    style: PropTypes.object,\n    title: PropTypes.string,\n  }\n\n  static defaultProps = {\n    items: [],\n    className: '',\n    columnCount: 3,\n    columnMargin: 20,\n    mask: false,\n    rowMargin: 20,\n    style: {},\n  }\n\n  createGrid() {\n    const { items, columnCount, getAspectRatio } = this.props\n    const grid = []\n    const gridRatioSums = []\n\n    _(columnCount).times(() => {\n      grid.push([])\n      gridRatioSums.push(0)\n    })\n\n    items.forEach((artwork) => {\n      // Find section with lowest *inverted* aspect ratio sum, which is the\n      // shortest column.\n      let lowestRatioSum = Number.MAX_VALUE\n      let sectionIndex = null\n\n      gridRatioSums.forEach((ratioSum, j) => {\n        if (ratioSum < lowestRatioSum) {\n          sectionIndex = j\n          lowestRatioSum = ratioSum\n        }\n      })\n\n      if (sectionIndex != null) {\n        const section = grid[sectionIndex]\n        section.push(artwork)\n\n        // Keep track of total section aspect ratio\n        const aspectRatio = getAspectRatio(artwork) || 1 // Ensure we never divide by null/0\n\n        // Invert the aspect ratio so that a lower value means a shorter section.\n        gridRatioSums[sectionIndex] += 1 / aspectRatio\n      }\n    })\n\n    return grid\n  }\n\n  renderItems() {\n    const {\n      items,\n      columnCount,\n      columnMargin,\n      getDisplayComponent,\n      rowMargin,\n    } = this.props\n\n    const grid = this.createGrid(items, columnCount)\n    const sections = []\n\n    _(columnCount).times((i) => {\n      const displayComponents = []\n      const rows = grid[i]\n\n      rows.forEach((row, j) => {\n        const artwork = grid[i][j]\n\n        displayComponents.push(\n          <div key={`column-${i}-row-${j}`}>{getDisplayComponent(artwork)}</div>\n        )\n\n        // Setting a marginBottom on the artwork component didnâ€™t work, so using\n        // a spacer view instead.\n        const addSpacer = j < rows.length - 1\n\n        if (addSpacer) {\n          displayComponents.push(\n            <div\n              className=\"grid-item\"\n              style={{\n                height: columnMargin,\n              }}\n              key={`column-${i}-spacer-${j}`}\n            />\n          )\n        }\n      })\n\n      const isLastColumn = i === columnCount - 1\n\n      sections.push(\n        <div\n          style={{\n            flex: 1,\n            minWidth: 0,\n            marginRight: isLastColumn ? 0 : rowMargin,\n          }}\n          key={i}\n        >\n          {displayComponents}\n        </div>\n      )\n    })\n\n    return sections\n  }\n\n  render() {\n    const { className, items, mask, style, title } = this.props\n    const isRevealExpanded = mask && items.length <= 2\n\n    return (\n      <Container>\n        <Reveal isEnabled={mask} isExpanded={isRevealExpanded}>\n          {title && <Title>{title}</Title>}\n\n          <div\n            className={className}\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              flexWrap: 'wrap',\n              ...style,\n            }}\n          >\n            {this.renderItems()}\n          </div>\n        </Reveal>\n      </Container>\n    )\n  }\n}\n\n// margin-bottom: 40px;\nconst Container = styled.div`\n  a {\n    text-decoration: none;\n  }\n`\n\nconst Title = styled.div`\n  font-size: 20px;\n  margin-bottom: 20px;\n`\n"]}]}