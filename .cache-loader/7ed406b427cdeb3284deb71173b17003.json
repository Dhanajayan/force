{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/node_modules/@artsy/reaction/node_modules/enquire.js/src/MediaQuery.js","dependencies":[{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/node_modules/enquire.js/src/MediaQuery.js","mtime":1489491799000},{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/.babelrc","mtime":1529423546000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["var QueryHandler = require(\"./QueryHandler\");\n\nvar each = require(\"./Util\").each;\n/**\n * Represents a single media query, manages it's state and registered handlers for this query\n *\n * @constructor\n * @param {string} query the media query string\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\n */\n\n\nfunction MediaQuery(query, isUnconditional) {\n  this.query = query;\n  this.isUnconditional = isUnconditional;\n  this.handlers = [];\n  this.mql = window.matchMedia(query);\n  var self = this;\n\n  this.listener = function (mql) {\n    // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\n    self.mql = mql.currentTarget || mql;\n    self.assess();\n  };\n\n  this.mql.addListener(this.listener);\n}\n\nMediaQuery.prototype = {\n  constuctor: MediaQuery,\n\n  /**\n   * add a handler for this query, triggering if already active\n   *\n   * @param {object} handler\n   * @param {function} handler.match callback for when query is activated\n   * @param {function} [handler.unmatch] callback for when query is deactivated\n   * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\n   * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\n   */\n  addHandler: function addHandler(handler) {\n    var qh = new QueryHandler(handler);\n    this.handlers.push(qh);\n    this.matches() && qh.on();\n  },\n\n  /**\n   * removes the given handler from the collection, and calls it's destroy methods\n   *\n   * @param {object || function} handler the handler to remove\n   */\n  removeHandler: function removeHandler(handler) {\n    var handlers = this.handlers;\n    each(handlers, function (h, i) {\n      if (h.equals(handler)) {\n        h.destroy();\n        return !handlers.splice(i, 1); //remove from array and exit each early\n      }\n    });\n  },\n\n  /**\n   * Determine whether the media query should be considered a match\n   *\n   * @return {Boolean} true if media query can be considered a match, false otherwise\n   */\n  matches: function matches() {\n    return this.mql.matches || this.isUnconditional;\n  },\n\n  /**\n   * Clears all handlers and unbinds events\n   */\n  clear: function clear() {\n    each(this.handlers, function (handler) {\n      handler.destroy();\n    });\n    this.mql.removeListener(this.listener);\n    this.handlers.length = 0; //clear array\n  },\n\n  /*\n      * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\n      */\n  assess: function assess() {\n    var action = this.matches() ? 'on' : 'off';\n    each(this.handlers, function (handler) {\n      handler[action]();\n    });\n  }\n};\nmodule.exports = MediaQuery;",{"version":3,"sources":["node_modules/@artsy/reaction/node_modules/enquire.js/src/MediaQuery.js"],"names":["QueryHandler","require","each","MediaQuery","query","isUnconditional","handlers","mql","window","matchMedia","self","listener","currentTarget","assess","addListener","prototype","constuctor","addHandler","handler","qh","push","matches","on","removeHandler","h","i","equals","destroy","splice","clear","removeListener","length","action","module","exports"],"mappings":"AAAA,IAAIA,eAAeC,yBAAnB;;AACA,IAAIC,OAAOD,kBAAkBC,IAA7B;AAEA;;;;;;;;;AAOA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,eAA3B,EAA4C;AACxC,OAAKD,KAAL,GAAaA,KAAb;AACA,OAAKC,eAAL,GAAuBA,eAAvB;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,GAAL,GAAWC,OAAOC,UAAP,CAAkBL,KAAlB,CAAX;AAEA,MAAIM,OAAO,IAAX;;AACA,OAAKC,QAAL,GAAgB,UAASJ,GAAT,EAAc;AAC1B;AACAG,SAAKH,GAAL,GAAWA,IAAIK,aAAJ,IAAqBL,GAAhC;AACAG,SAAKG,MAAL;AACH,GAJD;;AAKA,OAAKN,GAAL,CAASO,WAAT,CAAqB,KAAKH,QAA1B;AACH;;AAEDR,WAAWY,SAAX,GAAuB;AAEnBC,cAAab,UAFM;;AAInB;;;;;;;;;AASAc,cAAa,oBAASC,OAAT,EAAkB;AAC3B,QAAIC,KAAK,IAAInB,YAAJ,CAAiBkB,OAAjB,CAAT;AACA,SAAKZ,QAAL,CAAcc,IAAd,CAAmBD,EAAnB;AAEA,SAAKE,OAAL,MAAkBF,GAAGG,EAAH,EAAlB;AACH,GAlBkB;;AAoBnB;;;;;AAKAC,iBAAgB,uBAASL,OAAT,EAAkB;AAC9B,QAAIZ,WAAW,KAAKA,QAApB;AACAJ,SAAKI,QAAL,EAAe,UAASkB,CAAT,EAAYC,CAAZ,EAAe;AAC1B,UAAGD,EAAEE,MAAF,CAASR,OAAT,CAAH,EAAsB;AAClBM,UAAEG,OAAF;AACA,eAAO,CAACrB,SAASsB,MAAT,CAAgBH,CAAhB,EAAkB,CAAlB,CAAR,CAFkB,CAEY;AACjC;AACJ,KALD;AAMH,GAjCkB;;AAmCnB;;;;;AAKAJ,WAAU,mBAAW;AACjB,WAAO,KAAKd,GAAL,CAASc,OAAT,IAAoB,KAAKhB,eAAhC;AACH,GA1CkB;;AA4CnB;;;AAGAwB,SAAQ,iBAAW;AACf3B,SAAK,KAAKI,QAAV,EAAoB,UAASY,OAAT,EAAkB;AAClCA,cAAQS,OAAR;AACH,KAFD;AAGA,SAAKpB,GAAL,CAASuB,cAAT,CAAwB,KAAKnB,QAA7B;AACA,SAAKL,QAAL,CAAcyB,MAAd,GAAuB,CAAvB,CALe,CAKW;AAC7B,GArDkB;;AAuDnB;;;AAGAlB,UAAS,kBAAW;AAChB,QAAImB,SAAS,KAAKX,OAAL,KAAiB,IAAjB,GAAwB,KAArC;AAEAnB,SAAK,KAAKI,QAAV,EAAoB,UAASY,OAAT,EAAkB;AAClCA,cAAQc,MAAR;AACH,KAFD;AAGH;AAhEkB,CAAvB;AAmEAC,OAAOC,OAAP,GAAiB/B,UAAjB","file":"/Users/eve/development/force/node_modules/@artsy/reaction/node_modules/enquire.js/src/MediaQuery.js","sourceRoot":"/Users/eve/development/force","sourcesContent":["var QueryHandler = require('./QueryHandler');\nvar each = require('./Util').each;\n\n/**\n * Represents a single media query, manages it's state and registered handlers for this query\n *\n * @constructor\n * @param {string} query the media query string\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\n */\nfunction MediaQuery(query, isUnconditional) {\n    this.query = query;\n    this.isUnconditional = isUnconditional;\n    this.handlers = [];\n    this.mql = window.matchMedia(query);\n\n    var self = this;\n    this.listener = function(mql) {\n        // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\n        self.mql = mql.currentTarget || mql;\n        self.assess();\n    };\n    this.mql.addListener(this.listener);\n}\n\nMediaQuery.prototype = {\n\n    constuctor : MediaQuery,\n\n    /**\n     * add a handler for this query, triggering if already active\n     *\n     * @param {object} handler\n     * @param {function} handler.match callback for when query is activated\n     * @param {function} [handler.unmatch] callback for when query is deactivated\n     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\n     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\n     */\n    addHandler : function(handler) {\n        var qh = new QueryHandler(handler);\n        this.handlers.push(qh);\n\n        this.matches() && qh.on();\n    },\n\n    /**\n     * removes the given handler from the collection, and calls it's destroy methods\n     *\n     * @param {object || function} handler the handler to remove\n     */\n    removeHandler : function(handler) {\n        var handlers = this.handlers;\n        each(handlers, function(h, i) {\n            if(h.equals(handler)) {\n                h.destroy();\n                return !handlers.splice(i,1); //remove from array and exit each early\n            }\n        });\n    },\n\n    /**\n     * Determine whether the media query should be considered a match\n     *\n     * @return {Boolean} true if media query can be considered a match, false otherwise\n     */\n    matches : function() {\n        return this.mql.matches || this.isUnconditional;\n    },\n\n    /**\n     * Clears all handlers and unbinds events\n     */\n    clear : function() {\n        each(this.handlers, function(handler) {\n            handler.destroy();\n        });\n        this.mql.removeListener(this.listener);\n        this.handlers.length = 0; //clear array\n    },\n\n    /*\n        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\n        */\n    assess : function() {\n        var action = this.matches() ? 'on' : 'off';\n\n        each(this.handlers, function(handler) {\n            handler[action]();\n        });\n    }\n};\n\nmodule.exports = MediaQuery;\n"]}]}