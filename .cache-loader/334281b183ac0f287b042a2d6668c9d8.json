{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/lib/positronql.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/lib/positronql.js","mtime":1522077366000},{"path":"/Users/eve/development/force/.babelrc","mtime":1528124541000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.positronql = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime/core-js/json/stringify\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime/core-js/promise\"));\n\nvar _superagent = _interopRequireDefault(require(\"superagent\"));\n\nvar POSITRON_URL = require('sharify').data.POSITRON_URL;\n\nvar POSITRON_GRAPHQL_URL = POSITRON_URL + '/api/graphql';\n\nvar positronql = function positronql(options) {\n  var _options$method = options.method,\n      method = _options$method === void 0 ? 'get' : _options$method,\n      query = options.query,\n      variables = options.variables,\n      req = options.req;\n  return new _promise.default(function (resolve, reject) {\n    var r = _superagent.default[method](POSITRON_GRAPHQL_URL).set('Accept', 'application/json');\n\n    if (req && req.user) {\n      r.set('X-Access-Token', req.user.get('accessToken'));\n    }\n\n    r.query({\n      query: query,\n      variables: (0, _stringify.default)(variables)\n    });\n    r.end(function (err, response) {\n      if (err) {\n        return reject(err);\n      }\n\n      if (response.body.errors) {\n        var error = new Error((0, _stringify.default)(response.body.errors));\n        response.body.errors.map(function (_ref) {\n          var message = _ref.message;\n\n          if (message.match(/Not Found/i)) {\n            error.status = 404;\n            return reject(error);\n          } else if (message.match(/Must be a member/i)) {\n            error.status = 403;\n            return reject(error);\n          }\n        });\n      }\n\n      resolve(response.body.data);\n    });\n  });\n};\n\nexports.positronql = positronql;",{"version":3,"sources":["src/desktop/lib/positronql.js"],"names":["POSITRON_URL","require","data","POSITRON_GRAPHQL_URL","positronql","options","method","query","variables","req","resolve","reject","r","set","user","get","end","err","response","body","errors","error","Error","map","message","match","status"],"mappings":";;;;;;;;;;;;;AAAA;;IAEQA,Y,GAAiBC,QAAQ,SAAR,EAAmBC,I,CAApCF,Y;;AACR,IAAMG,uBAAuBH,eAAe,cAA5C;;AAEO,IAAMI,aAAa,SAAbA,UAAa,CAACC,OAAD,EAAa;AAAA,wBACaA,OADb,CAC7BC,MAD6B;AAAA,MAC7BA,MAD6B,gCACpB,KADoB;AAAA,MACbC,KADa,GACaF,OADb,CACbE,KADa;AAAA,MACNC,SADM,GACaH,OADb,CACNG,SADM;AAAA,MACKC,GADL,GACaJ,OADb,CACKI,GADL;AAGrC,SAAO,qBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,IAAI,oBAAQN,MAAR,EAAgBH,oBAAhB,EAAsCU,GAAtC,CACR,QADQ,EAER,kBAFQ,CAAV;;AAKA,QAAIJ,OAAOA,IAAIK,IAAf,EAAqB;AACnBF,QAAEC,GAAF,CAAM,gBAAN,EAAwBJ,IAAIK,IAAJ,CAASC,GAAT,CAAa,aAAb,CAAxB;AACD;;AAEDH,MAAEL,KAAF,CAAQ;AACNA,kBADM;AAENC,iBAAW,wBAAeA,SAAf;AAFL,KAAR;AAKAI,MAAEI,GAAF,CAAM,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACvB,UAAID,GAAJ,EAAS;AACP,eAAON,OAAOM,GAAP,CAAP;AACD;;AAED,UAAIC,SAASC,IAAT,CAAcC,MAAlB,EAA0B;AACxB,YAAMC,QAAQ,IAAIC,KAAJ,CAAU,wBAAeJ,SAASC,IAAT,CAAcC,MAA7B,CAAV,CAAd;AAEAF,iBAASC,IAAT,CAAcC,MAAd,CAAqBG,GAArB,CAAyB,gBAAiB;AAAA,cAAdC,OAAc,QAAdA,OAAc;;AACxC,cAAIA,QAAQC,KAAR,CAAc,YAAd,CAAJ,EAAiC;AAC/BJ,kBAAMK,MAAN,GAAe,GAAf;AACA,mBAAOf,OAAOU,KAAP,CAAP;AACD,WAHD,MAGO,IAAIG,QAAQC,KAAR,CAAc,mBAAd,CAAJ,EAAwC;AAC7CJ,kBAAMK,MAAN,GAAe,GAAf;AACA,mBAAOf,OAAOU,KAAP,CAAP;AACD;AACF,SARD;AASD;;AAEDX,cAAQQ,SAASC,IAAT,CAAcjB,IAAtB;AACD,KApBD;AAqBD,GApCM,CAAP;AAqCD,CAxCM","file":"/Users/eve/development/force/src/desktop/lib/positronql.js","sourceRoot":"/Users/eve/development/force","sourcesContent":["import request from 'superagent'\n\nconst { POSITRON_URL } = require('sharify').data\nconst POSITRON_GRAPHQL_URL = POSITRON_URL + '/api/graphql'\n\nexport const positronql = (options) => {\n  const { method = 'get', query, variables, req } = options\n\n  return new Promise((resolve, reject) => {\n    const r = request[method](POSITRON_GRAPHQL_URL).set(\n      'Accept',\n      'application/json'\n    )\n\n    if (req && req.user) {\n      r.set('X-Access-Token', req.user.get('accessToken'))\n    }\n\n    r.query({\n      query,\n      variables: JSON.stringify(variables),\n    })\n\n    r.end((err, response) => {\n      if (err) {\n        return reject(err)\n      }\n\n      if (response.body.errors) {\n        const error = new Error(JSON.stringify(response.body.errors))\n\n        response.body.errors.map(({ message }) => {\n          if (message.match(/Not Found/i)) {\n            error.status = 404\n            return reject(error)\n          } else if (message.match(/Must be a member/i)) {\n            error.status = 403\n            return reject(error)\n          }\n        })\n      }\n\n      resolve(response.body.data)\n    })\n  })\n}\n"]}]}