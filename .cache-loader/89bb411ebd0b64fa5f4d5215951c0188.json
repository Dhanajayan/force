{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/lib/components/create_order/index.tsx","dependencies":[{"path":"/Users/eve/development/force/src/lib/components/create_order/index.tsx","mtime":1533586772000},{"path":"/Users/eve/development/force/.babelrc","mtime":1528124541000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createOrder = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _metaphysics2 = _interopRequireDefault(require(\"../../metaphysics.coffee\"));\n\nvar _mutation = _interopRequireDefault(require(\"./mutation\"));\n\n//@ts-ignore\n// FIXME: Rewire\nvar metaphysics = _metaphysics2.default;\n\nvar createOrder =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee(input) {\n    var artworkId, editionSetId, quantity, user, send;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            artworkId = input.artworkId, editionSetId = input.editionSetId, quantity = input.quantity, user = input.user;\n\n            if (!(user == null)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            send = {\n              query: _mutation.default,\n              variables: {\n                artworkId: artworkId,\n                editionSetId: editionSetId,\n                quantity: quantity\n              },\n              req: {\n                user: user\n              }\n            };\n            return _context.abrupt(\"return\", metaphysics(send).catch(console.error.bind(console)));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function createOrder(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.createOrder = createOrder;",{"version":3,"sources":["src/lib/components/create_order/index.tsx"],"names":["metaphysics","createOrder","input","artworkId","editionSetId","quantity","user","send","query","variables","req","catch","console","error","bind"],"mappings":";;;;;;;;;;;;;AACA;;AAEA;;AAHA;AAKA;AACA,IAAIA,mCAAJ;;AASO,IAAMC;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAc,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,qBADiB,GAC2BD,KAD3B,CACjBC,SADiB,EACNC,YADM,GAC2BF,KAD3B,CACNE,YADM,EACQC,QADR,GAC2BH,KAD3B,CACQG,QADR,EACkBC,IADlB,GAC2BJ,KAD3B,CACkBI,IADlB;;AAAA,kBAGrBA,QAAQ,IAHa;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAMnBC,gBANmB,GAMZ;AACXC,sCADW;AAEXC,yBAAW;AAAEN,oCAAF;AAAaC,0CAAb;AAA2BC;AAA3B,eAFA;AAGXK,mBAAK;AAAEJ;AAAF;AAHM,aANY;AAAA,6CAYlBN,YAAYO,IAAZ,EAAkBI,KAAlB,CAAwBC,QAAQC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,CAAxB,CAZkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"/Users/eve/development/force/src/lib/components/create_order/index.tsx","sourceRoot":"/Users/eve/development/force","sourcesContent":["//@ts-ignore\nimport _metaphysics from 'lib/metaphysics.coffee'\n\nimport query from './mutation'\n\n// FIXME: Rewire\nlet metaphysics = _metaphysics\n\ninterface CreateOrderInput {\n  artworkId: string\n  editionSetId: string\n  quantity: number\n  user: object\n}\n\nexport const createOrder = async (input: CreateOrderInput) => {\n  const { artworkId, editionSetId, quantity, user } = input\n\n  if (user == null) {\n    return\n  }\n  const send = {\n    query,\n    variables: { artworkId, editionSetId, quantity },\n    req: { user },\n  }\n\n  return metaphysics(send).catch(console.error.bind(console))\n}\n"]}]}