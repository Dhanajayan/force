{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js","mtime":1521064653000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport _InfiniteScroll from \"../../../../../components/react/infinite_scroll/InfiniteScroll\";\nimport _Jump from \"../../../../../components/jump/react\";\nimport _MasonryArtwork from \"./artwork/MasonryArtwork\";\nimport _GridArtwork from \"./artwork/GridArtwork\";\nimport _ListArtwork from \"./artwork/ListArtwork\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport _MasonryGrid from \"../../../../../components/react/masonry_grid/MasonryGrid\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport block from 'bem-cn-lite';\nimport get from 'lodash.get';\nimport { infiniteScroll } from \"../../../actions/artworkBrowser\";\nimport { connect } from 'react-redux'; // FIXME: Rewire\n\nvar InfiniteScroll = _InfiniteScroll;\nvar Jump = _Jump;\nvar MasonryArtwork = _MasonryArtwork;\nvar GridArtwork = _GridArtwork;\nvar ListArtwork = _ListArtwork;\nvar MasonryGrid = _MasonryGrid;\n\nvar ArtworkDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ArtworkDisplay, _Component);\n\n  function ArtworkDisplay() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ArtworkDisplay);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ArtworkDisplay)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isMounted: false\n    });\n\n    return _this;\n  }\n\n  _createClass(ArtworkDisplay, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isMounted: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          infiniteScrollAction = _this$props.infiniteScrollAction,\n          isFetchingArtworks = _this$props.isFetchingArtworks,\n          isListView = _this$props.isListView,\n          isMobile = _this$props.isMobile,\n          saleArtworks = _this$props.saleArtworks;\n      var listType = isListView ? '--list' : '';\n      var calculateScrollPosition = isMobile && this.state.isMounted && isFetchingArtworks;\n      var showFullScreenSpinner = false;\n\n      if (calculateScrollPosition) {\n        showFullScreenSpinner = window.scrollY < window.innerHeight;\n      }\n\n      var b = block('auction-page-ArtworkDisplay');\n      return React.createElement(InfiniteScroll, {\n        triggerElement: \".auction-page-ArtworkDisplay, .auction-page-ArtworkDisplay__artworks--list\",\n        onTrigger: infiniteScrollAction\n      }, React.createElement(\"div\", {\n        className: b()\n      }, React.createElement(\"div\", {\n        className: b(\"artworks\".concat(listType))\n      }, showFullScreenSpinner && React.createElement(LoadingSpinner, {\n        fullscreen: true\n      }), function () {\n        if (isMobile) {\n          if (isListView) {\n            return React.createElement(\"div\", null, saleArtworks.map(function (saleArtwork, key) {\n              return React.createElement(ListArtwork, {\n                saleArtwork: saleArtwork,\n                key: key\n              });\n            }), React.createElement(LoadingSpinner, null)); // GridView\n          } else {\n            return React.createElement(\"div\", null, React.createElement(MasonryGrid, {\n              columnCount: 2,\n              items: saleArtworks,\n              mask: false,\n              getAspectRatio: function getAspectRatio(saleArtwork) {\n                return get(saleArtwork, 'artwork.images.0.aspect_ratio');\n              },\n              getDisplayComponent: function getDisplayComponent(saleArtwork) {\n                return React.createElement(MasonryArtwork, {\n                  saleArtwork: saleArtwork\n                });\n              }\n            }), React.createElement(LoadingSpinner, null));\n          } // Desktop\n\n        } else {\n          var DisplayComponent = isListView ? ListArtwork : GridArtwork;\n          return React.createElement(\"div\", null, saleArtworks.map(function (saleArtwork) {\n            return React.createElement(DisplayComponent, {\n              key: saleArtwork.id,\n              saleArtwork: saleArtwork\n            });\n          }), React.createElement(Jump, {\n            threshold: typeof window !== 'undefined' ? window.innerHeight * 2 : 0,\n            direction: \"bottom\",\n            element: \".auction-artworks-HeaderDesktop\",\n            offset: \".mlh-navbar\"\n          }), React.createElement(LoadingSpinner, null));\n        }\n      }())));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    value: function __reactstandin__regenerateByEval(key, code) {\n      this[key] = eval(code);\n    }\n  }]);\n\n  return ArtworkDisplay;\n}(Component);\n\n_defineProperty(ArtworkDisplay, \"propTypes\", {\n  infiniteScrollAction: PropTypes.func.isRequired,\n  isFetchingArtworks: PropTypes.bool.isRequired,\n  isListView: PropTypes.bool.isRequired,\n  isMobile: PropTypes.bool.isRequired,\n  saleArtworks: PropTypes.array.isRequired\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$app = state.app,\n      auction = _state$app.auction,\n      isMobile = _state$app.isMobile;\n  return {\n    allFetched: state.artworkBrowser.allFetched,\n    isFetchingArtworks: state.artworkBrowser.isFetchingArtworks,\n    isListView: state.artworkBrowser.isListView,\n    isMobile: isMobile,\n    isClosed: auction.isClosed(),\n    saleArtworks: state.artworkBrowser.saleArtworks,\n    saleId: auction.get('id')\n  };\n};\n\nvar mapDispatchToProps = {\n  infiniteScrollAction: infiniteScroll\n};\n\nvar _default = connect(mapStateToProps, mapDispatchToProps)(ArtworkDisplay);\n\nexport default _default;\nexport var test = {\n  ArtworkDisplay: ArtworkDisplay\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(InfiniteScroll, \"InfiniteScroll\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  reactHotLoader.register(Jump, \"Jump\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  reactHotLoader.register(MasonryArtwork, \"MasonryArtwork\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  reactHotLoader.register(GridArtwork, \"GridArtwork\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  reactHotLoader.register(ListArtwork, \"ListArtwork\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  reactHotLoader.register(MasonryGrid, \"MasonryGrid\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  reactHotLoader.register(ArtworkDisplay, \"ArtworkDisplay\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  reactHotLoader.register(test, \"test\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js"],"names":["_InfiniteScroll","_Jump","_MasonryArtwork","_GridArtwork","_ListArtwork","LoadingSpinner","_MasonryGrid","PropTypes","React","Component","block","get","infiniteScroll","connect","InfiniteScroll","Jump","MasonryArtwork","GridArtwork","ListArtwork","MasonryGrid","ArtworkDisplay","isMounted","setState","props","infiniteScrollAction","isFetchingArtworks","isListView","isMobile","saleArtworks","listType","calculateScrollPosition","state","showFullScreenSpinner","window","scrollY","innerHeight","b","map","saleArtwork","key","DisplayComponent","id","func","isRequired","bool","array","mapStateToProps","app","auction","allFetched","artworkBrowser","isClosed","saleId","mapDispatchToProps","test"],"mappings":"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","sourcesContent":["import _InfiniteScroll from 'desktop/components/react/infinite_scroll/InfiniteScroll'\nimport _Jump from 'desktop/components/jump/react'\nimport _MasonryArtwork from 'desktop/apps/auction/components/artwork_browser/main/artwork/MasonryArtwork'\nimport _GridArtwork from 'desktop/apps/auction/components/artwork_browser/main/artwork/GridArtwork'\nimport _ListArtwork from 'desktop/apps/auction/components/artwork_browser/main/artwork/ListArtwork'\nimport LoadingSpinner from 'desktop/apps/auction/components/artwork_browser/main/LoadingSpinner'\nimport _MasonryGrid from 'desktop/components/react/masonry_grid/MasonryGrid'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport block from 'bem-cn-lite'\nimport get from 'lodash.get'\nimport { infiniteScroll } from 'desktop/apps/auction/actions/artworkBrowser'\nimport { connect } from 'react-redux'\n\n// FIXME: Rewire\nlet InfiniteScroll = _InfiniteScroll\nlet Jump = _Jump\nlet MasonryArtwork = _MasonryArtwork\nlet GridArtwork = _GridArtwork\nlet ListArtwork = _ListArtwork\nlet MasonryGrid = _MasonryGrid\n\nclass ArtworkDisplay extends Component {\n  static propTypes = {\n    infiniteScrollAction: PropTypes.func.isRequired,\n    isFetchingArtworks: PropTypes.bool.isRequired,\n    isListView: PropTypes.bool.isRequired,\n    isMobile: PropTypes.bool.isRequired,\n    saleArtworks: PropTypes.array.isRequired\n  }\n\n  state = {\n    isMounted: false\n  }\n\n  componentDidMount () {\n    this.setState({\n      isMounted: true\n    })\n  }\n\n  render () {\n    const {\n      infiniteScrollAction,\n      isFetchingArtworks,\n      isListView,\n      isMobile,\n      saleArtworks\n    } = this.props\n\n    const listType = isListView ? '--list' : ''\n\n    const calculateScrollPosition = isMobile && this.state.isMounted && isFetchingArtworks\n    let showFullScreenSpinner = false\n\n    if (calculateScrollPosition) {\n      showFullScreenSpinner = window.scrollY < window.innerHeight\n    }\n\n    const b = block('auction-page-ArtworkDisplay')\n\n    return (\n      <InfiniteScroll\n        triggerElement='.auction-page-ArtworkDisplay, .auction-page-ArtworkDisplay__artworks--list'\n        onTrigger={infiniteScrollAction}\n      >\n        <div className={b()}>\n          <div className={b(`artworks${listType}`)}>\n            { showFullScreenSpinner &&\n              <LoadingSpinner fullscreen /> }\n\n            {(() => {\n              if (isMobile) {\n                if (isListView) {\n                  return (\n                    <div>\n                      { saleArtworks.map((saleArtwork, key) => (\n                        <ListArtwork\n                          saleArtwork={saleArtwork}\n                          key={key}\n                        />\n                      ))}\n\n                      <LoadingSpinner />\n                    </div>\n                  )\n\n                  // GridView\n                } else {\n                  return (\n                    <div>\n                      <MasonryGrid\n                        columnCount={2}\n                        items={saleArtworks}\n                        mask={false}\n                        getAspectRatio={(saleArtwork) => {\n                          return get(saleArtwork, 'artwork.images.0.aspect_ratio')\n                        }}\n                        getDisplayComponent={(saleArtwork) => {\n                          return (\n                            <MasonryArtwork\n                              saleArtwork={saleArtwork}\n                            />\n                          )\n                        }}\n                      />\n\n                      <LoadingSpinner />\n                    </div>\n                  )\n                }\n\n                // Desktop\n              } else {\n                const DisplayComponent = isListView ? ListArtwork : GridArtwork\n\n                return (\n                  <div>\n                    { saleArtworks.map((saleArtwork) => (\n                      <DisplayComponent\n                        key={saleArtwork.id}\n                        saleArtwork={saleArtwork}\n                      />\n                    ))}\n\n                    <Jump\n                      threshold={typeof window !== 'undefined' ? window.innerHeight * 2 : 0}\n                      direction='bottom'\n                      element='.auction-artworks-HeaderDesktop'\n                      offset='.mlh-navbar'\n                    />\n\n                    <LoadingSpinner />\n                  </div>\n                )\n              }\n            })()}\n          </div>\n        </div>\n      </InfiniteScroll>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { auction, isMobile } = state.app\n\n  return {\n    allFetched: state.artworkBrowser.allFetched,\n    isFetchingArtworks: state.artworkBrowser.isFetchingArtworks,\n    isListView: state.artworkBrowser.isListView,\n    isMobile,\n    isClosed: auction.isClosed(),\n    saleArtworks: state.artworkBrowser.saleArtworks,\n    saleId: auction.get('id')\n  }\n}\n\nconst mapDispatchToProps = {\n  infiniteScrollAction: infiniteScroll\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ArtworkDisplay)\n\nexport const test = { ArtworkDisplay }\n"]}]}