{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/lib/components/create_order/index.tsx","dependencies":[{"path":"/Users/eve/development/force/src/lib/components/create_order/index.tsx","mtime":1535573774000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n// @ts-ignore\nimport _metaphysics from \"../../metaphysics.coffee\";\nimport query from \"./mutation\"; // FIXME: Rewire\n\nvar metaphysics = _metaphysics;\nexport var createOrder =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(input) {\n    var artworkId, editionSetId, quantity, user, send;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            artworkId = input.artworkId, editionSetId = input.editionSetId, quantity = input.quantity, user = input.user;\n\n            if (!(user == null)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            send = {\n              query: query,\n              variables: {\n                artworkId: artworkId,\n                editionSetId: editionSetId,\n                quantity: quantity\n              },\n              req: {\n                user: user\n              }\n            };\n            return _context.abrupt(\"return\", metaphysics(send).catch(console.error.bind(console)));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function createOrder(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(metaphysics, \"metaphysics\", \"/Users/eve/development/force/src/lib/components/create_order/index.tsx\");\n  reactHotLoader.register(createOrder, \"createOrder\", \"/Users/eve/development/force/src/lib/components/create_order/index.tsx\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/lib/components/create_order/index.tsx"],"names":["_metaphysics","query","metaphysics","createOrder","input","artworkId","editionSetId","quantity","user","send","variables","req","catch","console","error","bind"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,YAAP;AAEA,OAAOC,KAAP,mB,CAEA;;AACA,IAAIC,WAAW,GAAGF,YAAlB;AASA,OAAO,IAAMG,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,SADiB,GAC2BD,KAD3B,CACjBC,SADiB,EACNC,YADM,GAC2BF,KAD3B,CACNE,YADM,EACQC,QADR,GAC2BH,KAD3B,CACQG,QADR,EACkBC,IADlB,GAC2BJ,KAD3B,CACkBI,IADlB;;AAAA,kBAGrBA,IAAI,IAAI,IAHa;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAMnBC,YAAAA,IANmB,GAMZ;AACXR,cAAAA,KAAK,EAALA,KADW;AAEXS,cAAAA,SAAS,EAAE;AAAEL,gBAAAA,SAAS,EAATA,SAAF;AAAaC,gBAAAA,YAAY,EAAZA,YAAb;AAA2BC,gBAAAA,QAAQ,EAARA;AAA3B,eAFA;AAGXI,cAAAA,GAAG,EAAE;AAAEH,gBAAAA,IAAI,EAAJA;AAAF;AAHM,aANY;AAAA,6CAYlBN,WAAW,CAACO,IAAD,CAAX,CAAkBG,KAAlB,CAAwBC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,CAAxB,CAZkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXV,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;;;;;;;;;0BATHD,W;0BASSC,W","sourcesContent":["// @ts-ignore\nimport _metaphysics from 'lib/metaphysics.coffee'\n\nimport query from './mutation'\n\n// FIXME: Rewire\nlet metaphysics = _metaphysics\n\ninterface CreateOrderInput {\n  artworkId: string\n  editionSetId: string\n  quantity: number\n  user: object\n}\n\nexport const createOrder = async (input: CreateOrderInput) => {\n  const { artworkId, editionSetId, quantity, user } = input\n\n  if (user == null) {\n    return\n  }\n  const send = {\n    query,\n    variables: { artworkId, editionSetId, quantity },\n    req: { user },\n  }\n\n  return metaphysics(send).catch(console.error.bind(console))\n}\n"]}]}