{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/node_modules/@artsy/reaction/node_modules/element-resize-detector/src/element-utils.js","dependencies":[{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/node_modules/element-resize-detector/src/element-utils.js","mtime":1463305372000},{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/.babelrc","mtime":1529423546000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nmodule.exports = function (options) {\n  var getState = options.stateHandler.getState;\n  /**\n   * Tells if the element has been made detectable and ready to be listened for resize events.\n   * @public\n   * @param {element} The element to check.\n   * @returns {boolean} True or false depending on if the element is detectable or not.\n   */\n\n  function isDetectable(element) {\n    var state = getState(element);\n    return state && !!state.isDetectable;\n  }\n  /**\n   * Marks the element that it has been made detectable and ready to be listened for resize events.\n   * @public\n   * @param {element} The element to mark.\n   */\n\n\n  function markAsDetectable(element) {\n    getState(element).isDetectable = true;\n  }\n  /**\n   * Tells if the element is busy or not.\n   * @public\n   * @param {element} The element to check.\n   * @returns {boolean} True or false depending on if the element is busy or not.\n   */\n\n\n  function isBusy(element) {\n    return !!getState(element).busy;\n  }\n  /**\n   * Marks the object is busy and should not be made detectable.\n   * @public\n   * @param {element} element The element to mark.\n   * @param {boolean} busy If the element is busy or not.\n   */\n\n\n  function markBusy(element, busy) {\n    getState(element).busy = !!busy;\n  }\n\n  return {\n    isDetectable: isDetectable,\n    markAsDetectable: markAsDetectable,\n    isBusy: isBusy,\n    markBusy: markBusy\n  };\n};",{"version":3,"sources":["node_modules/@artsy/reaction/node_modules/element-resize-detector/src/element-utils.js"],"names":["module","exports","options","getState","stateHandler","isDetectable","element","state","markAsDetectable","isBusy","busy","markBusy"],"mappings":"AAAA;;AAEAA,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AAC/B,MAAIC,WAAWD,QAAQE,YAAR,CAAqBD,QAApC;AAEA;;;;;;;AAMA,WAASE,YAAT,CAAsBC,OAAtB,EAA+B;AAC3B,QAAIC,QAAQJ,SAASG,OAAT,CAAZ;AACA,WAAOC,SAAS,CAAC,CAACA,MAAMF,YAAxB;AACH;AAED;;;;;;;AAKA,WAASG,gBAAT,CAA0BF,OAA1B,EAAmC;AAC/BH,aAASG,OAAT,EAAkBD,YAAlB,GAAiC,IAAjC;AACH;AAED;;;;;;;;AAMA,WAASI,MAAT,CAAgBH,OAAhB,EAAyB;AACrB,WAAO,CAAC,CAACH,SAASG,OAAT,EAAkBI,IAA3B;AACH;AAED;;;;;;;;AAMA,WAASC,QAAT,CAAkBL,OAAlB,EAA2BI,IAA3B,EAAiC;AAC7BP,aAASG,OAAT,EAAkBI,IAAlB,GAAyB,CAAC,CAACA,IAA3B;AACH;;AAED,SAAO;AACHL,kBAAcA,YADX;AAEHG,sBAAkBA,gBAFf;AAGHC,YAAQA,MAHL;AAIHE,cAAUA;AAJP,GAAP;AAMH,CAjDD","file":"/Users/eve/development/force/node_modules/@artsy/reaction/node_modules/element-resize-detector/src/element-utils.js","sourceRoot":"/Users/eve/development/force","sourcesContent":["\"use strict\";\n\nmodule.exports = function(options) {\n    var getState = options.stateHandler.getState;\n\n    /**\n     * Tells if the element has been made detectable and ready to be listened for resize events.\n     * @public\n     * @param {element} The element to check.\n     * @returns {boolean} True or false depending on if the element is detectable or not.\n     */\n    function isDetectable(element) {\n        var state = getState(element);\n        return state && !!state.isDetectable;\n    }\n\n    /**\n     * Marks the element that it has been made detectable and ready to be listened for resize events.\n     * @public\n     * @param {element} The element to mark.\n     */\n    function markAsDetectable(element) {\n        getState(element).isDetectable = true;\n    }\n\n    /**\n     * Tells if the element is busy or not.\n     * @public\n     * @param {element} The element to check.\n     * @returns {boolean} True or false depending on if the element is busy or not.\n     */\n    function isBusy(element) {\n        return !!getState(element).busy;\n    }\n\n    /**\n     * Marks the object is busy and should not be made detectable.\n     * @public\n     * @param {element} element The element to mark.\n     * @param {boolean} busy If the element is busy or not.\n     */\n    function markBusy(element, busy) {\n        getState(element).busy = !!busy;\n    }\n\n    return {\n        isDetectable: isDetectable,\n        markAsDetectable: markAsDetectable,\n        isBusy: isBusy,\n        markBusy: markBusy\n    };\n};\n"]}]}