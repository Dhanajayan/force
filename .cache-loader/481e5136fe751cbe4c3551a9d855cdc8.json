{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/node_modules/@artsy/reaction/src/Relay/createEnvironment.ts","dependencies":[{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/src/Relay/createEnvironment.ts","mtime":1529688806000},{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/.babelrc","mtime":1529423546000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEnvironment = createEnvironment;\n\nrequire(\"isomorphic-fetch\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _client = _interopRequireDefault(require(\"react-relay-network-modern-ssr/lib/client\"));\n\nvar _server = _interopRequireDefault(require(\"react-relay-network-modern-ssr/lib/server\"));\n\nvar _relayRuntime = require(\"relay-runtime\");\n\nvar _sharify = require(\"sharify\");\n\nvar _errors = require(\"../Utils/errors\");\n\nvar _reactRelayNetworkModern = require(\"react-relay-network-modern\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step(\"next\", value); } function _throw(err) { step(\"throw\", err); } _next(); }); }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction createEnvironment() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _config$cache = config.cache,\n      cache = _config$cache === void 0 ? {} : _config$cache,\n      checkStatus = config.checkStatus,\n      user = config.user;\n  var isServer = typeof window === \"undefined\";\n  var relaySSRMiddleware = isServer ? new _server.default() : new _client.default(cache);\n  relaySSRMiddleware.debug = false;\n  var headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Reaction\"\n  };\n  var url = isServer ? process.env.METAPHYSICS_ENDPOINT : _sharify.data.METAPHYSICS_ENDPOINT;\n  var network = new _reactRelayNetworkModern.RelayNetworkLayer([(0, _reactRelayNetworkModern.urlMiddleware)({\n    url: url,\n    headers: !!user ? _extends({}, headers, {\n      \"X-USER-ID\": user && user.id,\n      \"X-ACCESS-TOKEN\": user && user.accessToken\n    }) : headers\n  }), relaySSRMiddleware.getMiddleware({\n    lookup: true\n  }), (0, _reactRelayNetworkModern.cacheMiddleware)({\n    size: 100,\n    // max 100 requests\n    ttl: 900000 // 15 minutes\n\n  }), // TODO: This has been moved over from `Utils/metaphysics` but can eventually\n  // be replaced by error / retry middleware\n  function (next) {\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(req) {\n          var response, error;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return next(req);\n\n                case 2:\n                  response = _context.sent;\n\n                  if (!(!checkStatus || response.status >= 200 && response.status < 300)) {\n                    _context.next = 7;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", response);\n\n                case 7:\n                  error = new _errors.NetworkError(response.statusText);\n                  error.response = response;\n                  throw error;\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    );\n  }, // TODO: Audit logging\n  !isServer && (0, _reactRelayNetworkModern.loggerMiddleware)()]);\n  var source = new _relayRuntime.RecordSource();\n  var store = new _relayRuntime.Store(source);\n  var environment = new _relayRuntime.Environment({\n    network: network,\n    store: store\n  });\n  environment.relaySSRMiddleware = relaySSRMiddleware;\n  return environment;\n}",{"version":3,"sources":["node_modules/@artsy/reaction/src/Relay/createEnvironment.ts"],"names":["createEnvironment","config","cache","checkStatus","user","isServer","window","relaySSRMiddleware","debug","headers","url","process","env","METAPHYSICS_ENDPOINT","network","id","accessToken","getMiddleware","lookup","size","ttl","req","next","response","status","error","statusText","source","store","environment"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAiBO,SAASA,iBAAT,GAAgD;AAAA,MAArBC,MAAqB,uEAAJ,EAAI;AAAA,sBACXA,MADW,CAC7CC,KAD6C;AAAA,MAC7CA,KAD6C,8BACrC,EADqC;AAAA,MACjCC,WADiC,GACXF,MADW,CACjCE,WADiC;AAAA,MACpBC,IADoB,GACXH,MADW,CACpBG,IADoB;AAErD,MAAMC,WAAW,OAAOC,MAAP,KAAkB,WAAnC;AACA,MAAMC,qBAAqBF,WACvB,qBADuB,GAEvB,oBAAmBH,KAAnB,CAFJ;AAIAK,qBAAmBC,KAAnB,GAA2B,KAA3B;AAEA,MAAMC,UAAU;AACd,oBAAgB,kBADF;AAEd,kBAAc;AAFA,GAAhB;AAKA,MAAMC,MAAML,WACRM,QAAQC,GAAR,CAAYC,oBADJ,GAER,cAAGA,oBAFP;AAIA,MAAMC,UAAU,+CAAsB,CACpC,4CAAc;AACZJ,YADY;AAEZD,aAAS,CAAC,CAACL,IAAF,gBAEAK,OAFA;AAGH,mBAAaL,QAAQA,KAAKW,EAHvB;AAIH,wBAAkBX,QAAQA,KAAKY;AAJ5B,SAMLP;AARQ,GAAd,CADoC,EAWpCF,mBAAmBU,aAAnB,CAAiC;AAC/BC,YAAQ;AADuB,GAAjC,CAXoC,EAcpC,8CAAgB;AACdC,UAAM,GADQ;AACH;AACXC,SAAK,MAFS,CAED;;AAFC,GAAhB,CAdoC,EAmBpC;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAQ,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACiBC,KAAKD,GAAL,CADjB;;AAAA;AACAE,0BADA;;AAAA,wBAGF,CAACpB,WAAD,IAAiBoB,SAASC,MAAT,IAAmB,GAAnB,IAA0BD,SAASC,MAAT,GAAkB,GAH3D;AAAA;AAAA;AAAA;;AAAA,mDAIGD,QAJH;;AAAA;AAMEE,uBANF,GAMU,yBAAiBF,SAASG,UAA1B,CANV;AAOJD,wBAAMF,QAAN,GAAiBA,QAAjB;AAPI,wBAQEE,KARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GArBoC,EAgCpC;AACA,GAACpB,QAAD,IAAa,gDAjCuB,CAAtB,CAAhB;AAoCA,MAAMsB,SAAS,gCAAf;AACA,MAAMC,QAAQ,wBAAUD,MAAV,CAAd;AACA,MAAME,cAAc,8BAAgB;AAClCf,oBADkC;AAElCc;AAFkC,GAAhB,CAApB;AAKAC,cAAYtB,kBAAZ,GAAiCA,kBAAjC;AAEA,SAAOsB,WAAP;AACD","file":"/Users/eve/development/force/node_modules/@artsy/reaction/src/Relay/createEnvironment.ts","sourceRoot":"/Users/eve/development/force","sourcesContent":["import \"isomorphic-fetch\"\nimport \"regenerator-runtime/runtime\"\n\nimport RelayClientSSR from \"react-relay-network-modern-ssr/lib/client\"\nimport RelayServerSSR from \"react-relay-network-modern-ssr/lib/server\"\nimport { Environment, RecordSource, Store } from \"relay-runtime\"\nimport { data as sd } from \"sharify\"\nimport { NetworkError } from \"../Utils/errors\"\n\nimport {\n  cacheMiddleware,\n  loggerMiddleware,\n  RelayNetworkLayer,\n  urlMiddleware,\n} from \"react-relay-network-modern\"\n\ninterface Config {\n  cache?: object\n  user?: User\n  checkStatus?: boolean\n}\n\ninterface RelayEnvironment extends Environment {\n  relaySSRMiddleware: RelayClientSSR | RelayServerSSR\n}\n\nexport function createEnvironment(config: Config = {}) {\n  const { cache = {}, checkStatus, user } = config\n  const isServer = typeof window === \"undefined\"\n  const relaySSRMiddleware = isServer\n    ? new RelayServerSSR()\n    : new RelayClientSSR(cache)\n\n  relaySSRMiddleware.debug = false\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Reaction\",\n  }\n\n  const url = isServer\n    ? process.env.METAPHYSICS_ENDPOINT\n    : sd.METAPHYSICS_ENDPOINT\n\n  const network = new RelayNetworkLayer([\n    urlMiddleware({\n      url,\n      headers: !!user\n        ? {\n            ...headers,\n            \"X-USER-ID\": user && user.id,\n            \"X-ACCESS-TOKEN\": user && user.accessToken,\n          }\n        : headers,\n    }),\n    relaySSRMiddleware.getMiddleware({\n      lookup: true,\n    }),\n    cacheMiddleware({\n      size: 100, // max 100 requests\n      ttl: 900000, // 15 minutes\n    }),\n\n    // TODO: This has been moved over from `Utils/metaphysics` but can eventually\n    // be replaced by error / retry middleware\n    next => async req => {\n      const response = await next(req)\n\n      if (!checkStatus || (response.status >= 200 && response.status < 300)) {\n        return response\n      } else {\n        const error = new NetworkError(response.statusText)\n        error.response = response\n        throw error\n      }\n    },\n    // TODO: Audit logging\n    !isServer && loggerMiddleware(),\n  ])\n\n  const source = new RecordSource()\n  const store = new Store(source)\n  const environment = new Environment({\n    network,\n    store,\n  }) as RelayEnvironment\n\n  environment.relaySSRMiddleware = relaySSRMiddleware\n\n  return environment\n}\n"]}]}