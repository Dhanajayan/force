{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/auction/components/layout/active_bids/MyActiveBids.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/auction/components/layout/active_bids/MyActiveBids.js","mtime":1519227436000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport ActiveBidItem from \"./ActiveBidItem\";\nimport BidStatus from \"../../../../../components/bid_status/react\";\nimport MeQuery from \"../../../queries/me\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport block from 'bem-cn-lite';\nimport get from 'lodash.get';\nimport metaphysics from \"../../../../../../lib/metaphysics.coffee\";\nimport { connect } from 'react-redux';\nimport { data as sd } from 'sharify';\n\nvar MyActiveBids =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyActiveBids, _Component);\n\n  function MyActiveBids() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MyActiveBids);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MyActiveBids)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      lotStandings: []\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getFreshData\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props, saleId, user, _ref2, me;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, saleId = _this$props.saleId, user = _this$props.user;\n              _context.prev = 1;\n              _context.next = 4;\n              return metaphysics({\n                query: MeQuery(saleId),\n                req: {\n                  user: user\n                }\n              });\n\n            case 4:\n              _ref2 = _context.sent;\n              me = _ref2.me;\n\n              _this.setState({\n                lotStandings: me.lot_standings\n              });\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('auction/components/layout/active_bids/MyActiveBids.js', 'Error fetching active bid: ', _context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[1, 9]]);\n    })));\n\n    return _this;\n  }\n\n  _createClass(MyActiveBids, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        lotStandings: this.props.lotStandings\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.pollInterval = setInterval(this.getFreshData, sd.ACTIVE_BIDS_POLL_INTERVAL);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearInterval(this.pollInterval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var lotStandings = get(this.state, 'lotStandings', false) || this.props.lotStandings || [];\n      var b = block('auction-MyActiveBids');\n\n      if (!lotStandings.length) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        className: b()\n      }, React.createElement(\"h2\", null, \"Your Active Bids\"), lotStandings.filter(function (bid) {\n        return bid.sale_artwork;\n      }).map(function (bid, key) {\n        return React.createElement(ActiveBidItem, _extends({}, bid.sale_artwork, {\n          BidStatus: BidStatus,\n          bid: bid,\n          key: key\n        }));\n      }));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    value: function __reactstandin__regenerateByEval(key, code) {\n      this[key] = eval(code);\n    }\n  }]);\n\n  return MyActiveBids;\n}(Component);\n\n_defineProperty(MyActiveBids, \"propTypes\", {\n  lotStandings: PropTypes.array,\n  saleId: PropTypes.string.isRequired,\n  user: PropTypes.object\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var app = state.app;\n  return {\n    lotStandings: app.me.lot_standings,\n    saleId: app.auction.get('id'),\n    user: app.user\n  };\n};\n\nvar _default = connect(mapStateToProps)(MyActiveBids);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(MyActiveBids, \"MyActiveBids\", \"/Users/eve/development/force/src/desktop/apps/auction/components/layout/active_bids/MyActiveBids.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/Users/eve/development/force/src/desktop/apps/auction/components/layout/active_bids/MyActiveBids.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/eve/development/force/src/desktop/apps/auction/components/layout/active_bids/MyActiveBids.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/apps/auction/components/layout/active_bids/MyActiveBids.js"],"names":["ActiveBidItem","BidStatus","MeQuery","PropTypes","React","Component","block","get","metaphysics","connect","data","sd","MyActiveBids","lotStandings","props","saleId","user","query","req","me","setState","lot_standings","console","error","pollInterval","setInterval","getFreshData","ACTIVE_BIDS_POLL_INTERVAL","clearInterval","state","b","length","filter","bid","sale_artwork","map","key","array","string","isRequired","object","mapStateToProps","app","auction"],"mappings":"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","sourcesContent":["import ActiveBidItem from 'desktop/apps/auction/components/layout/active_bids/ActiveBidItem'\nimport BidStatus from 'desktop/components/bid_status/react'\nimport MeQuery from 'desktop/apps/auction/queries/me'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport block from 'bem-cn-lite'\nimport get from 'lodash.get'\nimport metaphysics from 'lib/metaphysics.coffee'\nimport { connect } from 'react-redux'\nimport { data as sd } from 'sharify'\n\nclass MyActiveBids extends Component {\n  static propTypes = {\n    lotStandings: PropTypes.array,\n    saleId: PropTypes.string.isRequired,\n    user: PropTypes.object\n  }\n\n  state = {\n    lotStandings: []\n  }\n\n  componentWillMount () {\n    this.setState({\n      lotStandings: this.props.lotStandings\n    })\n  }\n\n  componentDidMount () {\n    this.pollInterval = setInterval(this.getFreshData, sd.ACTIVE_BIDS_POLL_INTERVAL)\n  }\n\n  componentWillUnmount () {\n    this.clearInterval(this.pollInterval)\n  }\n\n  getFreshData = async () => {\n    const { saleId, user } = this.props\n\n    try {\n      const { me } = await metaphysics({\n        query: MeQuery(saleId),\n        req: {\n          user\n        }\n      })\n\n      this.setState({\n        lotStandings: me.lot_standings\n      })\n    } catch (error) {\n      console.error(\n        'auction/components/layout/active_bids/MyActiveBids.js',\n        'Error fetching active bid: ', error\n      )\n    }\n  }\n\n  render () {\n    const lotStandings = get(this.state, 'lotStandings', false) || this.props.lotStandings || []\n    const b = block('auction-MyActiveBids')\n\n    if (!lotStandings.length) {\n      return null\n    }\n\n    return (\n      <div className={b()}>\n        <h2>\n          Your Active Bids\n        </h2>\n\n        { lotStandings\n          .filter(bid => bid.sale_artwork)\n          .map((bid, key) => {\n            return (\n              <ActiveBidItem\n                {...bid.sale_artwork}\n                BidStatus={BidStatus}\n                bid={bid}\n                key={key}\n              />\n            )\n          })}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { app } = state\n\n  return {\n    lotStandings: app.me.lot_standings,\n    saleId: app.auction.get('id'),\n    user: app.user\n  }\n}\n\nexport default connect(\n  mapStateToProps\n)(MyActiveBids)\n"]}]}