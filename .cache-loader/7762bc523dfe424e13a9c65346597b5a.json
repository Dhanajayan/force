{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/lib/positronql.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/lib/positronql.js","mtime":1522077366000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport request from 'superagent';\n\nvar POSITRON_URL = require('sharify').data.POSITRON_URL;\n\nvar POSITRON_GRAPHQL_URL = POSITRON_URL + '/api/graphql';\nexport var positronql = function positronql(options) {\n  var _options$method = options.method,\n      method = _options$method === void 0 ? 'get' : _options$method,\n      query = options.query,\n      variables = options.variables,\n      req = options.req;\n  return new Promise(function (resolve, reject) {\n    var r = request[method](POSITRON_GRAPHQL_URL).set('Accept', 'application/json');\n\n    if (req && req.user) {\n      r.set('X-Access-Token', req.user.get('accessToken'));\n    }\n\n    r.query({\n      query: query,\n      variables: JSON.stringify(variables)\n    });\n    r.end(function (err, response) {\n      if (err) {\n        return reject(err);\n      }\n\n      if (response.body.errors) {\n        var error = new Error(JSON.stringify(response.body.errors));\n        response.body.errors.map(function (_ref) {\n          var message = _ref.message;\n\n          if (message.match(/Not Found/i)) {\n            error.status = 404;\n            return reject(error);\n          } else if (message.match(/Must be a member/i)) {\n            error.status = 403;\n            return reject(error);\n          }\n        });\n      }\n\n      resolve(response.body.data);\n    });\n  });\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(POSITRON_URL, \"POSITRON_URL\", \"/Users/eve/development/force/src/desktop/lib/positronql.js\");\n  reactHotLoader.register(POSITRON_GRAPHQL_URL, \"POSITRON_GRAPHQL_URL\", \"/Users/eve/development/force/src/desktop/lib/positronql.js\");\n  reactHotLoader.register(positronql, \"positronql\", \"/Users/eve/development/force/src/desktop/lib/positronql.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/lib/positronql.js"],"names":["request","POSITRON_URL","require","data","POSITRON_GRAPHQL_URL","positronql","options","method","query","variables","req","Promise","resolve","reject","r","set","user","get","JSON","stringify","end","err","response","body","errors","error","Error","map","message","match","status"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,YAApB;;IAEQC,Y,GAAiBC,OAAO,CAAC,SAAD,CAAP,CAAmBC,I,CAApCF,Y;;AACR,IAAMG,oBAAoB,GAAGH,YAAY,GAAG,cAA5C;AAEA,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAa;AAAA,wBACaA,OADb,CAC7BC,MAD6B;AAAA,MAC7BA,MAD6B,gCACpB,KADoB;AAAA,MACbC,KADa,GACaF,OADb,CACbE,KADa;AAAA,MACNC,SADM,GACaH,OADb,CACNG,SADM;AAAA,MACKC,GADL,GACaJ,OADb,CACKI,GADL;AAGrC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,CAAC,GAAGd,OAAO,CAACO,MAAD,CAAP,CAAgBH,oBAAhB,EAAsCW,GAAtC,CACR,QADQ,EAER,kBAFQ,CAAV;;AAKA,QAAIL,GAAG,IAAIA,GAAG,CAACM,IAAf,EAAqB;AACnBF,MAAAA,CAAC,CAACC,GAAF,CAAM,gBAAN,EAAwBL,GAAG,CAACM,IAAJ,CAASC,GAAT,CAAa,aAAb,CAAxB;AACD;;AAEDH,IAAAA,CAAC,CAACN,KAAF,CAAQ;AACNA,MAAAA,KAAK,EAALA,KADM;AAENC,MAAAA,SAAS,EAAES,IAAI,CAACC,SAAL,CAAeV,SAAf;AAFL,KAAR;AAKAK,IAAAA,CAAC,CAACM,GAAF,CAAM,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACvB,UAAID,GAAJ,EAAS;AACP,eAAOR,MAAM,CAACQ,GAAD,CAAb;AACD;;AAED,UAAIC,QAAQ,CAACC,IAAT,CAAcC,MAAlB,EAA0B;AACxB,YAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUR,IAAI,CAACC,SAAL,CAAeG,QAAQ,CAACC,IAAT,CAAcC,MAA7B,CAAV,CAAd;AAEAF,QAAAA,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBG,GAArB,CAAyB,gBAAiB;AAAA,cAAdC,OAAc,QAAdA,OAAc;;AACxC,cAAIA,OAAO,CAACC,KAAR,CAAc,YAAd,CAAJ,EAAiC;AAC/BJ,YAAAA,KAAK,CAACK,MAAN,GAAe,GAAf;AACA,mBAAOjB,MAAM,CAACY,KAAD,CAAb;AACD,WAHD,MAGO,IAAIG,OAAO,CAACC,KAAR,CAAc,mBAAd,CAAJ,EAAwC;AAC7CJ,YAAAA,KAAK,CAACK,MAAN,GAAe,GAAf;AACA,mBAAOjB,MAAM,CAACY,KAAD,CAAb;AACD;AACF,SARD;AASD;;AAEDb,MAAAA,OAAO,CAACU,QAAQ,CAACC,IAAT,CAAcpB,IAAf,CAAP;AACD,KApBD;AAqBD,GApCM,CAAP;AAqCD,CAxCM;;;;;;;;;;;;0BAHCF,Y;0BACFG,oB;0BAEOC,U","sourcesContent":["import request from 'superagent'\n\nconst { POSITRON_URL } = require('sharify').data\nconst POSITRON_GRAPHQL_URL = POSITRON_URL + '/api/graphql'\n\nexport const positronql = (options) => {\n  const { method = 'get', query, variables, req } = options\n\n  return new Promise((resolve, reject) => {\n    const r = request[method](POSITRON_GRAPHQL_URL).set(\n      'Accept',\n      'application/json'\n    )\n\n    if (req && req.user) {\n      r.set('X-Access-Token', req.user.get('accessToken'))\n    }\n\n    r.query({\n      query,\n      variables: JSON.stringify(variables),\n    })\n\n    r.end((err, response) => {\n      if (err) {\n        return reject(err)\n      }\n\n      if (response.body.errors) {\n        const error = new Error(JSON.stringify(response.body.errors))\n\n        response.body.errors.map(({ message }) => {\n          if (message.match(/Not Found/i)) {\n            error.status = 404\n            return reject(error)\n          } else if (message.match(/Must be a member/i)) {\n            error.status = 403\n            return reject(error)\n          }\n        })\n      }\n\n      resolve(response.body.data)\n    })\n  })\n}\n"]}]}