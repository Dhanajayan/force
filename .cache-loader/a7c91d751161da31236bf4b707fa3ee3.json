{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/consign/client/analytics_middleware.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/consign/client/analytics_middleware.js","mtime":1521064654000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport * as actions from \"./actions\";\nimport _analyticsHooks from \"../../../lib/analytics_hooks.coffee\"; // FIXME: Rewire\n\nvar analyticsHooks = _analyticsHooks;\n\nvar analyticsMiddleware = function analyticsMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      var result = next(action);\n      var nextState = store.getState(); // track certain types of actions\n\n      switch (action.type) {\n        case actions.UPDATE_USER:\n          {\n            var _action$payload = action.payload,\n                user = _action$payload.user,\n                accountCreated = _action$payload.accountCreated;\n            analyticsHooks.trigger('consignment:account:created', {\n              id: user.id,\n              email: user.email,\n              accountCreated: accountCreated\n            });\n            return result;\n          }\n\n        case actions.SUBMISSION_CREATED:\n          {\n            analyticsHooks.trigger('consignment:submitted', {\n              submissionId: action.payload.submissionId\n            });\n            return result;\n          }\n\n        case actions.SUBMISSION_COMPLETED:\n          {\n            var submissionId = nextState.submissionFlow.submission.id;\n            var assetIds = nextState.submissionFlow.assetIds;\n            analyticsHooks.trigger('consignment:completed', {\n              submissionId: submissionId,\n              assetIds: assetIds\n            });\n            return result;\n          }\n\n        case actions.SUBMISSION_ERROR:\n          {\n            var errors;\n            var errorType = action.payload.errorType;\n\n            if (errorType === 'validation') {\n              errors = nextState.form.describeWork.syncErrors;\n            } else if (errorType === 'convection_create') {\n              errors = 'Error creating submission';\n            } else if (errorType === 'convection_complete_submission') {\n              errors = 'Error completing submission';\n            }\n\n            analyticsHooks.trigger('consignment:submission:error', {\n              type: errorType,\n              errors: errors\n            });\n            return result;\n          }\n\n        case actions.SUBMIT_ARTIST:\n          {\n            var artistId = nextState.submissionFlow.inputs.artist_id;\n            analyticsHooks.trigger('consignment:artist:confirmed', {\n              artistId: artistId\n            });\n            return result;\n          }\n\n        default:\n          return result;\n      }\n    };\n  };\n};\n\nvar _default = analyticsMiddleware;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(analyticsHooks, \"analyticsHooks\", \"/Users/eve/development/force/src/desktop/apps/consign/client/analytics_middleware.js\");\n  reactHotLoader.register(analyticsMiddleware, \"analyticsMiddleware\", \"/Users/eve/development/force/src/desktop/apps/consign/client/analytics_middleware.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/eve/development/force/src/desktop/apps/consign/client/analytics_middleware.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/apps/consign/client/analytics_middleware.js"],"names":["actions","_analyticsHooks","analyticsHooks","analyticsMiddleware","store","next","action","result","nextState","getState","type","UPDATE_USER","payload","user","accountCreated","trigger","id","email","SUBMISSION_CREATED","submissionId","SUBMISSION_COMPLETED","submissionFlow","submission","assetIds","SUBMISSION_ERROR","errors","errorType","form","describeWork","syncErrors","SUBMIT_ARTIST","artistId","inputs","artist_id"],"mappings":";;;;;;AAAA,OAAO,KAAKA,OAAZ;AACA,OAAOC,eAAP,4C,CAEA;;AACA,IAAIC,cAAc,GAAGD,eAArB;;AAEA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACrD,UAAMC,MAAM,GAAGF,IAAI,CAACC,MAAD,CAAnB;AACA,UAAME,SAAS,GAAGJ,KAAK,CAACK,QAAN,EAAlB,CAFqD,CAIrD;;AACA,cAAQH,MAAM,CAACI,IAAf;AACE,aAAKV,OAAO,CAACW,WAAb;AAA0B;AAAA,kCAIpBL,MAAM,CAACM,OAJa;AAAA,gBAEtBC,IAFsB,mBAEtBA,IAFsB;AAAA,gBAGtBC,cAHsB,mBAGtBA,cAHsB;AAKxBZ,YAAAA,cAAc,CAACa,OAAf,CAAuB,6BAAvB,EAAsD;AACpDC,cAAAA,EAAE,EAAEH,IAAI,CAACG,EAD2C;AAEpDC,cAAAA,KAAK,EAAEJ,IAAI,CAACI,KAFwC;AAGpDH,cAAAA,cAAc,EAAEA;AAHoC,aAAtD;AAKA,mBAAOP,MAAP;AACD;;AACD,aAAKP,OAAO,CAACkB,kBAAb;AAAiC;AAC/BhB,YAAAA,cAAc,CAACa,OAAf,CACE,uBADF,EAEE;AACEI,cAAAA,YAAY,EAAEb,MAAM,CAACM,OAAP,CAAeO;AAD/B,aAFF;AAMA,mBAAOZ,MAAP;AACD;;AACD,aAAKP,OAAO,CAACoB,oBAAb;AAAmC;AACjC,gBAAMD,YAAY,GAAGX,SAAS,CAACa,cAAV,CAAyBC,UAAzB,CAAoCN,EAAzD;AACA,gBAAMO,QAAQ,GAAGf,SAAS,CAACa,cAAV,CAAyBE,QAA1C;AACArB,YAAAA,cAAc,CAACa,OAAf,CACE,uBADF,EAEE;AACEI,cAAAA,YAAY,EAAZA,YADF;AAEEI,cAAAA,QAAQ,EAARA;AAFF,aAFF;AAOA,mBAAOhB,MAAP;AACD;;AACD,aAAKP,OAAO,CAACwB,gBAAb;AAA+B;AAC7B,gBAAIC,MAAJ;AAD6B,gBAGrBC,SAHqB,GAGPpB,MAAM,CAACM,OAHA,CAGrBc,SAHqB;;AAI7B,gBAAIA,SAAS,KAAK,YAAlB,EAAgC;AAC9BD,cAAAA,MAAM,GAAGjB,SAAS,CAACmB,IAAV,CAAeC,YAAf,CAA4BC,UAArC;AACD,aAFD,MAEO,IAAIH,SAAS,KAAK,mBAAlB,EAAuC;AAC5CD,cAAAA,MAAM,GAAG,2BAAT;AACD,aAFM,MAEA,IAAIC,SAAS,KAAK,gCAAlB,EAAoD;AACzDD,cAAAA,MAAM,GAAG,6BAAT;AACD;;AAEDvB,YAAAA,cAAc,CAACa,OAAf,CACE,8BADF,EAEE;AAAEL,cAAAA,IAAI,EAAEgB,SAAR;AAAmBD,cAAAA,MAAM,EAANA;AAAnB,aAFF;AAIA,mBAAOlB,MAAP;AACD;;AACD,aAAKP,OAAO,CAAC8B,aAAb;AAA4B;AAC1B,gBAAMC,QAAQ,GAAGvB,SAAS,CAACa,cAAV,CAAyBW,MAAzB,CAAgCC,SAAjD;AACA/B,YAAAA,cAAc,CAACa,OAAf,CACE,8BADF,EAEE;AAAEgB,cAAAA,QAAQ,EAARA;AAAF,aAFF;AAIA,mBAAOxB,MAAP;AACD;;AACD;AAAS,iBAAOA,MAAP;AA5DX;AA8DD,KAnEwC;AAAA,GAAR;AAAA,CAAjC;;eAqEeJ,mB;AAAf;;;;;;;;;;;;0BAvEID,c;0BAEEC,mB","sourcesContent":["import * as actions from './actions'\nimport _analyticsHooks from '../../../lib/analytics_hooks.coffee'\n\n// FIXME: Rewire\nlet analyticsHooks = _analyticsHooks\n\nconst analyticsMiddleware = store => next => action => {\n  const result = next(action)\n  const nextState = store.getState()\n\n  // track certain types of actions\n  switch (action.type) {\n    case actions.UPDATE_USER: {\n      const {\n        user,\n        accountCreated\n      } = action.payload\n      analyticsHooks.trigger('consignment:account:created', {\n        id: user.id,\n        email: user.email,\n        accountCreated: accountCreated\n      })\n      return result\n    }\n    case actions.SUBMISSION_CREATED: {\n      analyticsHooks.trigger(\n        'consignment:submitted',\n        {\n          submissionId: action.payload.submissionId\n        }\n      )\n      return result\n    }\n    case actions.SUBMISSION_COMPLETED: {\n      const submissionId = nextState.submissionFlow.submission.id\n      const assetIds = nextState.submissionFlow.assetIds\n      analyticsHooks.trigger(\n        'consignment:completed',\n        {\n          submissionId,\n          assetIds\n        }\n      )\n      return result\n    }\n    case actions.SUBMISSION_ERROR: {\n      let errors\n\n      const { errorType } = action.payload\n      if (errorType === 'validation') {\n        errors = nextState.form.describeWork.syncErrors\n      } else if (errorType === 'convection_create') {\n        errors = 'Error creating submission'\n      } else if (errorType === 'convection_complete_submission') {\n        errors = 'Error completing submission'\n      }\n\n      analyticsHooks.trigger(\n        'consignment:submission:error',\n        { type: errorType, errors }\n      )\n      return result\n    }\n    case actions.SUBMIT_ARTIST: {\n      const artistId = nextState.submissionFlow.inputs.artist_id\n      analyticsHooks.trigger(\n        'consignment:artist:confirmed',\n        { artistId }\n      )\n      return result\n    }\n    default: return result\n  }\n}\n\nexport default analyticsMiddleware\n"]}]}