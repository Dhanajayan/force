{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/node_modules/batch-processor/src/batch-processor.js","dependencies":[{"path":"/Users/eve/development/force/node_modules/batch-processor/src/batch-processor.js","mtime":1454757929000},{"path":"/Users/eve/development/force/.babelrc","mtime":1528124541000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nvar utils = require(\"./utils\");\n\nmodule.exports = function batchProcessorMaker(options) {\n  options = options || {};\n  var reporter = options.reporter;\n  var asyncProcess = utils.getOption(options, \"async\", true);\n  var autoProcess = utils.getOption(options, \"auto\", true);\n\n  if (autoProcess && !asyncProcess) {\n    reporter && reporter.warn(\"Invalid options combination. auto=true and async=false is invalid. Setting async=true.\");\n    asyncProcess = true;\n  }\n\n  var batch = Batch();\n  var asyncFrameHandler;\n  var isProcessing = false;\n\n  function addFunction(level, fn) {\n    if (!isProcessing && autoProcess && asyncProcess && batch.size() === 0) {\n      // Since this is async, it is guaranteed to be executed after that the fn is added to the batch.\n      // This needs to be done before, since we're checking the size of the batch to be 0.\n      processBatchAsync();\n    }\n\n    batch.add(level, fn);\n  }\n\n  function processBatch() {\n    // Save the current batch, and create a new batch so that incoming functions are not added into the currently processing batch.\n    // Continue processing until the top-level batch is empty (functions may be added to the new batch while processing, and so on).\n    isProcessing = true;\n\n    while (batch.size()) {\n      var processingBatch = batch;\n      batch = Batch();\n      processingBatch.process();\n    }\n\n    isProcessing = false;\n  }\n\n  function forceProcessBatch(localAsyncProcess) {\n    if (isProcessing) {\n      return;\n    }\n\n    if (localAsyncProcess === undefined) {\n      localAsyncProcess = asyncProcess;\n    }\n\n    if (asyncFrameHandler) {\n      cancelFrame(asyncFrameHandler);\n      asyncFrameHandler = null;\n    }\n\n    if (localAsyncProcess) {\n      processBatchAsync();\n    } else {\n      processBatch();\n    }\n  }\n\n  function processBatchAsync() {\n    asyncFrameHandler = requestFrame(processBatch);\n  }\n\n  function clearBatch() {\n    batch = {};\n    batchSize = 0;\n    topLevel = 0;\n    bottomLevel = 0;\n  }\n\n  function cancelFrame(listener) {\n    // var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;\n    var cancel = clearTimeout;\n    return cancel(listener);\n  }\n\n  function requestFrame(callback) {\n    // var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) { return window.setTimeout(fn, 20); };\n    var raf = function raf(fn) {\n      return setTimeout(fn, 0);\n    };\n\n    return raf(callback);\n  }\n\n  return {\n    add: addFunction,\n    force: forceProcessBatch\n  };\n};\n\nfunction Batch() {\n  var batch = {};\n  var size = 0;\n  var topLevel = 0;\n  var bottomLevel = 0;\n\n  function add(level, fn) {\n    if (!fn) {\n      fn = level;\n      level = 0;\n    }\n\n    if (level > topLevel) {\n      topLevel = level;\n    } else if (level < bottomLevel) {\n      bottomLevel = level;\n    }\n\n    if (!batch[level]) {\n      batch[level] = [];\n    }\n\n    batch[level].push(fn);\n    size++;\n  }\n\n  function process() {\n    for (var level = bottomLevel; level <= topLevel; level++) {\n      var fns = batch[level];\n\n      for (var i = 0; i < fns.length; i++) {\n        var fn = fns[i];\n        fn();\n      }\n    }\n  }\n\n  function getSize() {\n    return size;\n  }\n\n  return {\n    add: add,\n    process: process,\n    size: getSize\n  };\n}\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Batch, \"Batch\", \"/Users/eve/development/force/node_modules/batch-processor/src/batch-processor.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["node_modules/batch-processor/src/batch-processor.js"],"names":["utils","require","module","exports","batchProcessorMaker","options","reporter","asyncProcess","getOption","autoProcess","warn","batch","Batch","asyncFrameHandler","isProcessing","addFunction","level","fn","size","processBatchAsync","add","processBatch","processingBatch","process","forceProcessBatch","localAsyncProcess","undefined","cancelFrame","requestFrame","clearBatch","batchSize","topLevel","bottomLevel","listener","cancel","clearTimeout","callback","raf","setTimeout","force","push","fns","i","length","getSize"],"mappings":"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","file":"/Users/eve/development/force/node_modules/batch-processor/src/batch-processor.js","sourceRoot":"/Users/eve/development/force","sourcesContent":["\"use strict\";\n\nvar utils = require(\"./utils\");\n\nmodule.exports = function batchProcessorMaker(options) {\n    options             = options || {};\n    var reporter        = options.reporter;\n    var asyncProcess    = utils.getOption(options, \"async\", true);\n    var autoProcess     = utils.getOption(options, \"auto\", true);\n\n    if(autoProcess && !asyncProcess) {\n        reporter && reporter.warn(\"Invalid options combination. auto=true and async=false is invalid. Setting async=true.\");\n        asyncProcess = true;\n    }\n\n    var batch = Batch();\n    var asyncFrameHandler;\n    var isProcessing = false;\n\n    function addFunction(level, fn) {\n        if(!isProcessing && autoProcess && asyncProcess && batch.size() === 0) {\n            // Since this is async, it is guaranteed to be executed after that the fn is added to the batch.\n            // This needs to be done before, since we're checking the size of the batch to be 0.\n            processBatchAsync();\n        }\n\n        batch.add(level, fn);\n    }\n\n    function processBatch() {\n        // Save the current batch, and create a new batch so that incoming functions are not added into the currently processing batch.\n        // Continue processing until the top-level batch is empty (functions may be added to the new batch while processing, and so on).\n        isProcessing = true;\n        while (batch.size()) {\n            var processingBatch = batch;\n            batch = Batch();\n            processingBatch.process();\n        }\n        isProcessing = false;\n    }\n\n    function forceProcessBatch(localAsyncProcess) {\n        if (isProcessing) {\n            return;\n        }\n\n        if(localAsyncProcess === undefined) {\n            localAsyncProcess = asyncProcess;\n        }\n\n        if(asyncFrameHandler) {\n            cancelFrame(asyncFrameHandler);\n            asyncFrameHandler = null;\n        }\n\n        if(localAsyncProcess) {\n            processBatchAsync();\n        } else {\n            processBatch();\n        }\n    }\n\n    function processBatchAsync() {\n        asyncFrameHandler = requestFrame(processBatch);\n    }\n\n    function clearBatch() {\n        batch           = {};\n        batchSize       = 0;\n        topLevel        = 0;\n        bottomLevel     = 0;\n    }\n\n    function cancelFrame(listener) {\n        // var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;\n        var cancel = clearTimeout;\n        return cancel(listener);\n    }\n\n    function requestFrame(callback) {\n        // var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) { return window.setTimeout(fn, 20); };\n        var raf = function(fn) { return setTimeout(fn, 0); };\n        return raf(callback);\n    }\n\n    return {\n        add: addFunction,\n        force: forceProcessBatch\n    };\n};\n\nfunction Batch() {\n    var batch       = {};\n    var size        = 0;\n    var topLevel    = 0;\n    var bottomLevel = 0;\n\n    function add(level, fn) {\n        if(!fn) {\n            fn = level;\n            level = 0;\n        }\n\n        if(level > topLevel) {\n            topLevel = level;\n        } else if(level < bottomLevel) {\n            bottomLevel = level;\n        }\n\n        if(!batch[level]) {\n            batch[level] = [];\n        }\n\n        batch[level].push(fn);\n        size++;\n    }\n\n    function process() {\n        for(var level = bottomLevel; level <= topLevel; level++) {\n            var fns = batch[level];\n\n            for(var i = 0; i < fns.length; i++) {\n                var fn = fns[i];\n                fn();\n            }\n        }\n    }\n\n    function getSize() {\n        return size;\n    }\n\n    return {\n        add: add,\n        process: process,\n        size: getSize\n    };\n}\n"]}]}