{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/components/frame_animator/index.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/components/frame_animator/index.js","mtime":1519227436000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport * as easingFunctions from \"./easing\";\n\nvar FrameAnimator =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a frame animator\n   * @param {function} callback - A callback function that receives the animating value as its argument\n   * @param {Object} options - Options to control the timing and value of the animator\n   * @param {number} options.duration - The amount of time over which the animator should execute, in milliseconds (default = 500)\n   * @param {number} options.startValue - The starting value for the animatable value (default = 0)\n   * @param {number} options.endValue - The ending value for the animatable value (default = 1)\n   * @param {string} options.easing - The easing formula to use (default = 'cubicInOut')\n   */\n  function FrameAnimator(callback) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, FrameAnimator);\n\n    var _options$duration = options.duration,\n        duration = _options$duration === void 0 ? 500 : _options$duration,\n        _options$startValue = options.startValue,\n        startValue = _options$startValue === void 0 ? 0 : _options$startValue,\n        _options$endValue = options.endValue,\n        endValue = _options$endValue === void 0 ? 1 : _options$endValue,\n        _options$easing = options.easing,\n        easing = _options$easing === void 0 ? 'cubicInOut' : _options$easing;\n    this._animatorFunction = this._createAnimatorFunction(callback, {\n      duration: duration,\n      startValue: startValue,\n      endValue: endValue,\n      easing: easing\n    });\n  }\n\n  _createClass(FrameAnimator, [{\n    key: \"_createAnimatorFunction\",\n    value: function _createAnimatorFunction(callback, options) {\n      var duration = options.duration,\n          startValue = options.startValue,\n          endValue = options.endValue,\n          easing = options.easing;\n      var startedAt = window.performance.now();\n\n      var animatorFunction = function animatorFunction(timestamp) {\n        var elapsed = timestamp - startedAt;\n\n        if (elapsed <= duration) {\n          var t = elapsed / duration;\n          var currentEasing = easingFunctions[easing](t);\n          var currentValue = startValue + currentEasing * (endValue - startValue);\n          callback(currentValue);\n          window.requestAnimationFrame(animatorFunction);\n        }\n      };\n\n      return animatorFunction;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      window.requestAnimationFrame(this._animatorFunction);\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    value: function __reactstandin__regenerateByEval(key, code) {\n      this[key] = eval(code);\n    }\n  }]);\n\n  return FrameAnimator;\n}();\n\nexport { FrameAnimator as default };\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(FrameAnimator, \"FrameAnimator\", \"/Users/eve/development/force/src/desktop/components/frame_animator/index.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/components/frame_animator/index.js"],"names":["easingFunctions","FrameAnimator","callback","options","duration","startValue","endValue","easing","_animatorFunction","_createAnimatorFunction","startedAt","window","performance","now","animatorFunction","timestamp","elapsed","t","currentEasing","currentValue","requestAnimationFrame"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,eAAZ;;IAEqBC,a;;;AACnB;;;;;;;;;AASA,yBAAYC,QAAZ,EAAoC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAAA,4BAM9BA,OAN8B,CAEhCC,QAFgC;AAAA,QAEhCA,QAFgC,kCAErB,GAFqB;AAAA,8BAM9BD,OAN8B,CAGhCE,UAHgC;AAAA,QAGhCA,UAHgC,oCAGnB,CAHmB;AAAA,4BAM9BF,OAN8B,CAIhCG,QAJgC;AAAA,QAIhCA,QAJgC,kCAIrB,CAJqB;AAAA,0BAM9BH,OAN8B,CAKhCI,MALgC;AAAA,QAKhCA,MALgC,gCAKvB,YALuB;AAQlC,SAAKC,iBAAL,GAAyB,KAAKC,uBAAL,CAA6BP,QAA7B,EAAuC;AAC9DE,MAAAA,QAAQ,EAARA,QAD8D;AAE9DC,MAAAA,UAAU,EAAVA,UAF8D;AAG9DC,MAAAA,QAAQ,EAARA,QAH8D;AAI9DC,MAAAA,MAAM,EAANA;AAJ8D,KAAvC,CAAzB;AAMD;;;;4CAEuBL,Q,EAAUC,O,EAAS;AAAA,UACjCC,QADiC,GACUD,OADV,CACjCC,QADiC;AAAA,UACvBC,UADuB,GACUF,OADV,CACvBE,UADuB;AAAA,UACXC,QADW,GACUH,OADV,CACXG,QADW;AAAA,UACDC,MADC,GACUJ,OADV,CACDI,MADC;AAEzC,UAAMG,SAAS,GAAGC,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAlB;;AACA,UAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAAe;AACtC,YAAMC,OAAO,GAAGD,SAAS,GAAGL,SAA5B;;AACA,YAAIM,OAAO,IAAIZ,QAAf,EAAyB;AACvB,cAAMa,CAAC,GAAGD,OAAO,GAAGZ,QAApB;AACA,cAAMc,aAAa,GAAGlB,eAAe,CAACO,MAAD,CAAf,CAAwBU,CAAxB,CAAtB;AACA,cAAME,YAAY,GAChBd,UAAU,GAAGa,aAAa,IAAIZ,QAAQ,GAAGD,UAAf,CAD5B;AAEAH,UAAAA,QAAQ,CAACiB,YAAD,CAAR;AACAR,UAAAA,MAAM,CAACS,qBAAP,CAA6BN,gBAA7B;AACD;AACF,OAVD;;AAWA,aAAOA,gBAAP;AACD;;;4BAEO;AACNH,MAAAA,MAAM,CAACS,qBAAP,CAA6B,KAAKZ,iBAAlC;AACD;;;;;;;;;;;SA7CkBP,a;;;;;;;;;;;;0BAAAA,a","sourcesContent":["import * as easingFunctions from './easing'\n\nexport default class FrameAnimator {\n  /**\n   * Create a frame animator\n   * @param {function} callback - A callback function that receives the animating value as its argument\n   * @param {Object} options - Options to control the timing and value of the animator\n   * @param {number} options.duration - The amount of time over which the animator should execute, in milliseconds (default = 500)\n   * @param {number} options.startValue - The starting value for the animatable value (default = 0)\n   * @param {number} options.endValue - The ending value for the animatable value (default = 1)\n   * @param {string} options.easing - The easing formula to use (default = 'cubicInOut')\n   */\n  constructor(callback, options = {}) {\n    const {\n      duration = 500,\n      startValue = 0,\n      endValue = 1,\n      easing = 'cubicInOut',\n    } = options\n\n    this._animatorFunction = this._createAnimatorFunction(callback, {\n      duration,\n      startValue,\n      endValue,\n      easing,\n    })\n  }\n\n  _createAnimatorFunction(callback, options) {\n    const { duration, startValue, endValue, easing } = options\n    const startedAt = window.performance.now()\n    const animatorFunction = (timestamp) => {\n      const elapsed = timestamp - startedAt\n      if (elapsed <= duration) {\n        const t = elapsed / duration\n        const currentEasing = easingFunctions[easing](t)\n        const currentValue =\n          startValue + currentEasing * (endValue - startValue)\n        callback(currentValue)\n        window.requestAnimationFrame(animatorFunction)\n      }\n    }\n    return animatorFunction\n  }\n\n  start() {\n    window.requestAnimationFrame(this._animatorFunction)\n  }\n}\n"]}]}