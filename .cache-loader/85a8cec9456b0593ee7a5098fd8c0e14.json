{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/consign/client/submission.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/consign/client/submission.js","mtime":1521064654000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport analyticsMiddleware from \"./analytics_middleware\";\nimport ResponsiveWindow from \"../../../components/react/responsive_window\";\nimport React from 'react';\nimport SubmissionFlow from \"../components/submission_flow\";\nimport geo from \"../../../components/geo/index.coffee\";\nimport reducers from \"./reducers\";\nimport createHistory from 'history/createBrowserHistory';\nimport createLogger from 'redux-logger';\nimport stepsConfig from \"./steps_config\";\nimport thunkMiddleware from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { Redirect, Router, Route, Switch } from 'react-router';\nimport { createStore, applyMiddleware } from 'redux';\nimport { data as sd } from 'sharify';\nimport { ignoreRedirectOnAuth, updateAuthFormStateAndClearError, updateCurrentStep, updateLocationFromSubmissionAndFreeze, updateStepsWithUser, updateStepsWithoutUser } from \"./actions\";\nimport { render } from 'react-dom';\nimport { routerMiddleware } from 'react-router-redux';\n\nfunction setupSubmissionFlow() {\n  // load google maps for autocomplete\n  geo.loadGoogleMaps();\n  var history = createHistory();\n  var middleware = [];\n  middleware.push(thunkMiddleware); // lets us dispatch() functions\n\n  middleware.push(routerMiddleware(history));\n  middleware.push(analyticsMiddleware); // middleware to help us track previous and future states\n\n  if (sd.NODE_ENV === 'development' || sd.NODE_ENV === 'staging') {\n    middleware.push(createLogger({\n      // middleware that logs actions\n      collapsed: true\n    }));\n  }\n\n  var store = createStore(reducers, applyMiddleware.apply(void 0, middleware));\n\n  var determineSteps = function determineSteps() {\n    if (sd.CURRENT_USER) {\n      store.dispatch(updateStepsWithUser());\n    } else {\n      store.dispatch(updateStepsWithoutUser());\n    }\n  }; // track pageviews when react-router updates the url\n\n\n  history.listen(function (ev) {\n    window.analytics.page({\n      path: ev.pathname\n    }, {\n      integrations: {\n        Marketo: false\n      }\n    });\n  });\n  render(React.createElement(Provider, {\n    store: store\n  }, React.createElement(ResponsiveWindow, null, React.createElement(Router, {\n    history: history\n  }, React.createElement(Switch, null, React.createElement(Route, {\n    exact: true,\n    path: \"/consign/submission\",\n    render: function render() {\n      if (sd.CURRENT_USER) {\n        store.dispatch(updateStepsWithUser());\n        return React.createElement(Redirect, {\n          to: stepsConfig.chooseArtist.path\n        });\n      } else {\n        store.dispatch(updateStepsWithoutUser());\n        return React.createElement(Redirect, {\n          to: stepsConfig.createAccount.path\n        });\n      }\n    }\n  }), React.createElement(Route, {\n    path: stepsConfig.createAccount.path,\n    render: function render() {\n      store.dispatch(updateStepsWithoutUser());\n      store.dispatch(updateCurrentStep('createAccount'));\n      return React.createElement(SubmissionFlow, null);\n    }\n  }), React.createElement(Route, {\n    path: stepsConfig.chooseArtist.path,\n    render: function render() {\n      determineSteps();\n      store.dispatch(updateCurrentStep('chooseArtist'));\n      return React.createElement(SubmissionFlow, null);\n    }\n  }), React.createElement(Route, {\n    path: stepsConfig.describeWork.path,\n    render: function render() {\n      determineSteps();\n      store.dispatch(updateCurrentStep('describeWork'));\n      return React.createElement(SubmissionFlow, null);\n    }\n  }), React.createElement(Route, {\n    path: stepsConfig.uploadPhotos.submissionPath,\n    render: function render() {\n      determineSteps();\n      store.dispatch(updateCurrentStep('uploadPhotos'));\n      return React.createElement(SubmissionFlow, null);\n    }\n  }), React.createElement(Route, {\n    path: stepsConfig.describeWork.submissionPath,\n    render: function render() {\n      determineSteps();\n      store.dispatch(updateCurrentStep('describeWork'));\n      store.dispatch(updateLocationFromSubmissionAndFreeze());\n      return React.createElement(SubmissionFlow, null);\n    }\n  }), React.createElement(Route, {\n    path: stepsConfig.uploadLanding.submissionPath,\n    render: function render() {\n      var Component = stepsConfig.uploadLanding.component;\n      store.dispatch(updateAuthFormStateAndClearError('logIn'));\n      store.dispatch(ignoreRedirectOnAuth());\n      return React.createElement(Component, null);\n    }\n  }), React.createElement(Route, {\n    path: stepsConfig.thankYou.submissionPath,\n    component: stepsConfig.thankYou.component\n  }))))), document.getElementById('consignments-submission__flow'));\n}\n\nvar _default = function _default() {\n  setupSubmissionFlow();\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(setupSubmissionFlow, \"setupSubmissionFlow\", \"/Users/eve/development/force/src/desktop/apps/consign/client/submission.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/eve/development/force/src/desktop/apps/consign/client/submission.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/apps/consign/client/submission.js"],"names":["analyticsMiddleware","ResponsiveWindow","React","SubmissionFlow","geo","reducers","createHistory","createLogger","stepsConfig","thunkMiddleware","Provider","Redirect","Router","Route","Switch","createStore","applyMiddleware","data","sd","ignoreRedirectOnAuth","updateAuthFormStateAndClearError","updateCurrentStep","updateLocationFromSubmissionAndFreeze","updateStepsWithUser","updateStepsWithoutUser","render","routerMiddleware","setupSubmissionFlow","loadGoogleMaps","history","middleware","push","NODE_ENV","collapsed","store","determineSteps","CURRENT_USER","dispatch","listen","ev","window","analytics","page","path","pathname","integrations","Marketo","chooseArtist","createAccount","describeWork","uploadPhotos","submissionPath","uploadLanding","Component","component","thankYou","document","getElementById"],"mappings":"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","sourcesContent":["import analyticsMiddleware from './analytics_middleware'\nimport ResponsiveWindow from '../../../components/react/responsive_window'\nimport React from 'react'\nimport SubmissionFlow from '../components/submission_flow'\nimport geo from '../../../components/geo/index.coffee'\nimport reducers from './reducers'\nimport createHistory from 'history/createBrowserHistory'\nimport createLogger from 'redux-logger'\nimport stepsConfig from './steps_config'\nimport thunkMiddleware from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport { Redirect, Router, Route, Switch } from 'react-router'\nimport { createStore, applyMiddleware } from 'redux'\nimport { data as sd } from 'sharify'\nimport {\n  ignoreRedirectOnAuth,\n  updateAuthFormStateAndClearError,\n  updateCurrentStep,\n  updateLocationFromSubmissionAndFreeze,\n  updateStepsWithUser,\n  updateStepsWithoutUser,\n} from './actions'\nimport { render } from 'react-dom'\nimport { routerMiddleware } from 'react-router-redux'\n\nfunction setupSubmissionFlow() {\n  // load google maps for autocomplete\n  geo.loadGoogleMaps()\n  const history = createHistory()\n\n  const middleware = []\n\n  middleware.push(thunkMiddleware) // lets us dispatch() functions\n  middleware.push(routerMiddleware(history))\n  middleware.push(analyticsMiddleware) // middleware to help us track previous and future states\n\n  if (sd.NODE_ENV === 'development' || sd.NODE_ENV === 'staging') {\n    middleware.push(\n      createLogger({\n        // middleware that logs actions\n        collapsed: true,\n      })\n    )\n  }\n\n  const store = createStore(reducers, applyMiddleware(...middleware))\n\n  const determineSteps = () => {\n    if (sd.CURRENT_USER) {\n      store.dispatch(updateStepsWithUser())\n    } else {\n      store.dispatch(updateStepsWithoutUser())\n    }\n  }\n\n  // track pageviews when react-router updates the url\n  history.listen((ev) => {\n    window.analytics.page(\n      { path: ev.pathname },\n      { integrations: { Marketo: false } }\n    )\n  })\n\n  render(\n    <Provider store={store}>\n      <ResponsiveWindow>\n        <Router history={history}>\n          <Switch>\n            <Route\n              exact\n              path=\"/consign/submission\"\n              render={() => {\n                if (sd.CURRENT_USER) {\n                  store.dispatch(updateStepsWithUser())\n                  return <Redirect to={stepsConfig.chooseArtist.path} />\n                } else {\n                  store.dispatch(updateStepsWithoutUser())\n                  return <Redirect to={stepsConfig.createAccount.path} />\n                }\n              }}\n            />\n            <Route\n              path={stepsConfig.createAccount.path}\n              render={() => {\n                store.dispatch(updateStepsWithoutUser())\n                store.dispatch(updateCurrentStep('createAccount'))\n                return <SubmissionFlow />\n              }}\n            />\n            <Route\n              path={stepsConfig.chooseArtist.path}\n              render={() => {\n                determineSteps()\n                store.dispatch(updateCurrentStep('chooseArtist'))\n                return <SubmissionFlow />\n              }}\n            />\n            <Route\n              path={stepsConfig.describeWork.path}\n              render={() => {\n                determineSteps()\n                store.dispatch(updateCurrentStep('describeWork'))\n                return <SubmissionFlow />\n              }}\n            />\n            <Route\n              path={stepsConfig.uploadPhotos.submissionPath}\n              render={() => {\n                determineSteps()\n                store.dispatch(updateCurrentStep('uploadPhotos'))\n                return <SubmissionFlow />\n              }}\n            />\n            <Route\n              path={stepsConfig.describeWork.submissionPath}\n              render={() => {\n                determineSteps()\n                store.dispatch(updateCurrentStep('describeWork'))\n                store.dispatch(updateLocationFromSubmissionAndFreeze())\n                return <SubmissionFlow />\n              }}\n            />\n            <Route\n              path={stepsConfig.uploadLanding.submissionPath}\n              render={() => {\n                const Component = stepsConfig.uploadLanding.component\n                store.dispatch(updateAuthFormStateAndClearError('logIn'))\n                store.dispatch(ignoreRedirectOnAuth())\n                return <Component />\n              }}\n            />\n            <Route\n              path={stepsConfig.thankYou.submissionPath}\n              component={stepsConfig.thankYou.component}\n            />\n          </Switch>\n        </Router>\n      </ResponsiveWindow>\n    </Provider>,\n    document.getElementById('consignments-submission__flow')\n  )\n}\n\nexport default () => {\n  setupSubmissionFlow()\n}\n"]}]}