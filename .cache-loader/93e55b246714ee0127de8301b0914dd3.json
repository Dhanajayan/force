{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/node_modules/@artsy/reaction/src/Router/state.tsx","dependencies":[{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/src/Router/state.tsx","mtime":1530569767000},{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/.babelrc","mtime":1529423546000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PreloadLinkState = exports.AppState = void 0;\n\nvar _unstated = require(\"unstated\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nvar enableLogging = process.env.NODE_ENV === \"development\" && typeof window !== \"undefined\";\n\nif (enableLogging) {\n  var logger = require(\"unstated-debug\");\n\n  logger.logStateChanges = false;\n}\n/**\n * The following are state containers to be used with unstated. If needing to\n * tap into state can use like so:\n *\n * @example\n * import { GlobalAppState } from 'Router/State'\n *\n * return(\n *   <Subscribe to={[GlobalAppState]}>\n *     {({ state }: GlobalAppState) => {\n *       return (\n *         <div>\n *           Logged in? {state.isLoggedIn}\n *         </div>\n *       )\n *     }}\n *   </Subscribe>\n * )\n */\n\n\nvar AppState =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(AppState, _Container);\n\n  function AppState() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AppState);\n\n    _this = _possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this));\n    Object.defineProperty(_assertThisInitialized(_this), \"state\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: {\n        system: null\n      }\n    });\n    _this.state = props;\n    return _this;\n  }\n\n  return AppState;\n}(_unstated.Container);\n\nexports.AppState = AppState;\n\nvar PreloadLinkState =\n/*#__PURE__*/\nfunction (_Container2) {\n  _inherits(PreloadLinkState, _Container2);\n\n  function PreloadLinkState() {\n    var _ref;\n\n    var _temp, _this2;\n\n    _classCallCheck(this, PreloadLinkState);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _possibleConstructorReturn(_this2, (_temp = _this2 = _possibleConstructorReturn(this, (_ref = PreloadLinkState.__proto__ || Object.getPrototypeOf(PreloadLinkState)).call.apply(_ref, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this2), \"state\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: {\n        isLoading: false\n      }\n    }), Object.defineProperty(_assertThisInitialized(_this2), \"toggleLoading\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(isLoading) {\n        _this2.setState({\n          isLoading: isLoading\n        });\n      }\n    }), _temp));\n  }\n\n  return PreloadLinkState;\n}(_unstated.Container);\n\nexports.PreloadLinkState = PreloadLinkState;",{"version":3,"sources":["node_modules/@artsy/reaction/src/Router/state.tsx"],"names":["enableLogging","process","env","NODE_ENV","window","logger","require","logStateChanges","AppState","props","system","state","PreloadLinkState","isLoading","setState"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;AAGA,IAAMA,gBACJC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0C,OAAOC,MAAP,KAAkB,WAD9D;;AAGA,IAAIJ,aAAJ,EAAmB;AACjB,MAAMK,SAASC,QAAQ,gBAAR,CAAf;;AACAD,SAAOE,eAAP,GAAyB,KAAzB;AACD;AAED;;;;;;;;;;;;;;;;;;;;;IAoBaC,Q;;;;;AAKX,sBAA6B;AAAA;;AAAA,QAAjBC,KAAiB,uEAAJ,EAAI;;AAAA;;AAC3B;AAD2B;AAAA;AAAA;AAAA;AAAA,aAJrB;AACNC,gBAAQ;AADF;AAIqB;AAE3B,UAAKC,KAAL,GAAaF,KAAb;AAF2B;AAG5B;;;;;;;IAGUG,gB;;;;;;;;;;;;;;;;;;;;aACH;AACNC,mBAAW;AADL;;;;;aAIQ,0BAAa;AAC3B,eAAKC,QAAL,CAAc;AACZD;AADY,SAAd;AAGD","file":"/Users/eve/development/force/node_modules/@artsy/reaction/src/Router/state.tsx","sourceRoot":"/Users/eve/development/force","sourcesContent":["import { Container } from \"unstated\"\nimport { AppStateContainer, PreloadLinkContainer } from \"./types\"\n\nconst enableLogging =\n  process.env.NODE_ENV === \"development\" && typeof window !== \"undefined\"\n\nif (enableLogging) {\n  const logger = require(\"unstated-debug\")\n  logger.logStateChanges = false\n}\n\n/**\n * The following are state containers to be used with unstated. If needing to\n * tap into state can use like so:\n *\n * @example\n * import { GlobalAppState } from 'Router/State'\n *\n * return(\n *   <Subscribe to={[GlobalAppState]}>\n *     {({ state }: GlobalAppState) => {\n *       return (\n *         <div>\n *           Logged in? {state.isLoggedIn}\n *         </div>\n *       )\n *     }}\n *   </Subscribe>\n * )\n */\n\nexport class AppState extends Container<AppStateContainer> {\n  state = {\n    system: null,\n  }\n\n  constructor(props: any = {}) {\n    super()\n    this.state = props\n  }\n}\n\nexport class PreloadLinkState extends Container<PreloadLinkContainer> {\n  state = {\n    isLoading: false,\n  }\n\n  toggleLoading = isLoading => {\n    this.setState({\n      isLoading,\n    })\n  }\n}\n"]}]}