{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/auth2/helpers.ts","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/auth2/helpers.ts","mtime":1532569086000},{"path":"/Users/eve/development/force/.babelrc","mtime":1528124541000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRedirect = exports.setCookies = exports.handleSubmit = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime/core-js/json/stringify\"));\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime/core-js/object/assign\"));\n\nvar _identity2 = _interopRequireDefault(require(\"lodash/identity\"));\n\nvar _pickBy2 = _interopRequireDefault(require(\"lodash/pickBy\"));\n\nvar _cookiesJs = _interopRequireDefault(require(\"cookies-js\"));\n\nvar _Types = require(\"@artsy/reaction/dist/Components/Authentication/Types\");\n\nvar _sharify = require(\"sharify\");\n\nvar mediator = require(\"../../lib/mediator.coffee\");\n\nvar LoggedOutUser = require(\"../../models/logged_out_user.coffee\");\n\nvar handleSubmit = function handleSubmit(type, modalOptions, values, formikBag) {\n  var user = new LoggedOutUser();\n  var contextModule = modalOptions.contextModule,\n      copy = modalOptions.copy,\n      destination = modalOptions.destination,\n      redirectTo = modalOptions.redirectTo,\n      intent = modalOptions.intent,\n      signupReferer = modalOptions.signupReferer,\n      trigger = modalOptions.trigger,\n      triggerSeconds = modalOptions.triggerSeconds;\n  /*\n   * These are the attributes that will be saved on the user. We are moving\n   * towards using `intent` on analytics, but Gravity expects `signupIntent`\n   */\n\n  var userAttributes = (0, _assign.default)({}, values, {\n    _csrf: _sharify.data.CSRF_TOKEN,\n    signupIntent: intent,\n    signupReferer: signupReferer,\n    agreed_to_receive_emails: values.accepted_terms_of_service\n  });\n  user.set(userAttributes);\n  var options = {\n    success: function success(_, res) {\n      formikBag.setSubmitting(false);\n      var analytics = window.analytics;\n      var action;\n\n      switch (type) {\n        case _Types.ModalType.login:\n          action = 'Successfully logged in';\n          break;\n\n        case _Types.ModalType.signup:\n          action = 'Created account';\n          break;\n\n        case _Types.ModalType.forgot:\n          action = 'Forgot Password';\n          break;\n      }\n\n      if (analytics) {\n        var properties = {\n          action: action,\n          user_id: res && res.user && res.user.id,\n          trigger: trigger,\n          trigger_seconds: triggerSeconds,\n          intent: intent,\n          context_module: contextModule,\n          modal_copy: copy,\n          auth_redirect: redirectTo || destination,\n          service: 'email'\n        };\n        analytics.track(action, (0, _pickBy2.default)(properties, _identity2.default));\n      }\n\n      var defaultRedirect = getRedirect(type);\n      window.location = modalOptions.redirectTo || defaultRedirect;\n    },\n    error: function error(_, res) {\n      var error = res.responseJSON;\n      formikBag.setStatus(error);\n      formikBag.setSubmitting(false);\n      mediator.trigger('auth:error', error.message);\n    }\n  };\n\n  switch (type) {\n    case _Types.ModalType.login:\n      user.login(options);\n      break;\n\n    case _Types.ModalType.signup:\n      user.signup(options);\n      break;\n\n    case _Types.ModalType.forgot:\n      user.forgot(options);\n      break;\n  }\n};\n\nexports.handleSubmit = handleSubmit;\n\nvar setCookies = function setCookies(options) {\n  var afterSignUpAction = options.afterSignUpAction,\n      destination = options.destination;\n\n  if (afterSignUpAction) {\n    _cookiesJs.default.set('afterSignUpAction', (0, _stringify.default)(afterSignUpAction));\n  }\n\n  if (destination) {\n    _cookiesJs.default.set('destination', destination, {\n      expires: 60 * 60 * 24\n    });\n  }\n};\n\nexports.setCookies = setCookies;\n\nvar getRedirect = function getRedirect(type) {\n  var _window = window,\n      location = _window.location;\n\n  switch (type) {\n    case 'login':\n    case 'forgot':\n      if (['/login', '/forgot'].includes(location.pathname)) {\n        return '/';\n      } else {\n        return location;\n      }\n\n    case 'signup':\n      return '/personalize';\n\n    default:\n      return window.location;\n  }\n};\n\nexports.getRedirect = getRedirect;",{"version":3,"sources":["src/desktop/apps/auth2/helpers.ts"],"names":["mediator","require","LoggedOutUser","handleSubmit","type","modalOptions","values","formikBag","user","contextModule","copy","destination","redirectTo","intent","signupReferer","trigger","triggerSeconds","userAttributes","_csrf","CSRF_TOKEN","signupIntent","agreed_to_receive_emails","accepted_terms_of_service","set","options","success","_","res","setSubmitting","analytics","window","action","login","signup","forgot","properties","user_id","id","trigger_seconds","context_module","modal_copy","auth_redirect","service","track","defaultRedirect","getRedirect","location","error","responseJSON","setStatus","message","setCookies","afterSignUpAction","expires","includes","pathname"],"mappings":"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","file":"/Users/eve/development/force/src/desktop/apps/auth2/helpers.ts","sourceRoot":"/Users/eve/development/force","sourcesContent":["import Cookies from 'cookies-js'\nimport {\n  ModalType,\n  ModalOptions,\n} from '@artsy/reaction/dist/Components/Authentication/Types'\nimport { data as sd } from 'sharify'\nimport { pickBy, identity } from 'lodash'\n\nconst mediator = require('../../lib/mediator.coffee')\nconst LoggedOutUser = require('../../models/logged_out_user.coffee')\n\nexport const handleSubmit = (\n  type: ModalType,\n  modalOptions: ModalOptions,\n  values,\n  formikBag\n) => {\n  const user = new LoggedOutUser()\n  const {\n    contextModule,\n    copy,\n    destination,\n    redirectTo,\n    intent,\n    signupReferer,\n    trigger,\n    triggerSeconds,\n  } = modalOptions\n\n  /*\n   * These are the attributes that will be saved on the user. We are moving\n   * towards using `intent` on analytics, but Gravity expects `signupIntent`\n   */\n  const userAttributes = Object.assign({}, values, {\n    _csrf: sd.CSRF_TOKEN,\n    signupIntent: intent,\n    signupReferer,\n    agreed_to_receive_emails: values.accepted_terms_of_service,\n  })\n\n  user.set(userAttributes)\n\n  const options = {\n    success: (_, res) => {\n      formikBag.setSubmitting(false)\n      const analytics = (window as any).analytics\n\n      let action\n      switch (type) {\n        case ModalType.login:\n          action = 'Successfully logged in'\n          break\n        case ModalType.signup:\n          action = 'Created account'\n          break\n        case ModalType.forgot:\n          action = 'Forgot Password'\n          break\n      }\n\n      if (analytics) {\n        const properties = {\n          action,\n          user_id: res && res.user && res.user.id,\n          trigger,\n          trigger_seconds: triggerSeconds,\n          intent,\n          context_module: contextModule,\n          modal_copy: copy,\n          auth_redirect: redirectTo || destination,\n          service: 'email',\n        }\n        analytics.track(action, pickBy(properties, identity))\n      }\n\n      const defaultRedirect = getRedirect(type)\n      window.location = modalOptions.redirectTo || (defaultRedirect as any)\n    },\n    error: (_, res) => {\n      const error = res.responseJSON\n      formikBag.setStatus(error)\n      formikBag.setSubmitting(false)\n      mediator.trigger('auth:error', error.message)\n    },\n  }\n\n  switch (type) {\n    case ModalType.login:\n      user.login(options)\n      break\n    case ModalType.signup:\n      user.signup(options)\n      break\n    case ModalType.forgot:\n      user.forgot(options)\n      break\n  }\n}\n\nexport const setCookies = options => {\n  const { afterSignUpAction, destination } = options\n\n  if (afterSignUpAction) {\n    Cookies.set('afterSignUpAction', JSON.stringify(afterSignUpAction))\n  }\n\n  if (destination) {\n    Cookies.set('destination', destination, {\n      expires: 60 * 60 * 24,\n    })\n  }\n}\n\nexport const getRedirect = type => {\n  const { location } = window\n  switch (type) {\n    case 'login':\n    case 'forgot':\n      if (['/login', '/forgot'].includes(location.pathname)) {\n        return '/'\n      } else {\n        return location\n      }\n    case 'signup':\n      return '/personalize'\n    default:\n      return window.location\n  }\n}\n"]}]}