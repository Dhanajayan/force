{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/collect2/client.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/collect2/client.js","mtime":1537450901000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { buildClientApp } from \"@artsy/reaction/dist/Artsy/Router\";\nimport { data as sd } from \"sharify\";\nimport { routes } from \"@artsy/reaction/dist/Apps/Collect/routes\";\nimport mediator from \"../../lib/mediator.coffee\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport qs from \"querystring\";\nimport { clone, isArray } from \"underscore\"; // TODO: remove in favor of serializing filters from reaction\n\nmediator.on(\"collect:filter:changed\", function (filters) {\n  onFilterChange(filters);\n});\nbuildClientApp({\n  routes: routes,\n  context: {\n    user: sd.CURRENT_USER,\n    mediator: mediator\n  }\n}).then(function (_ref) {\n  var ClientApp = _ref.ClientApp;\n  ReactDOM.hydrate(React.createElement(ClientApp, null), document.getElementById(\"react-root\"));\n}).catch(function (error) {\n  console.error(error);\n});\n\nif (module.hot) {\n  module.hot.accept();\n} // Update URL with current filters and sort.\n\n\nvar onFilterChange = function onFilterChange(filters) {\n  var params = clone(filters);\n  Object.keys(params).forEach(function (filter) {\n    if (!params[filter] || isArray(params[filter]) && params[filter].length === 0) {\n      delete params[filter];\n    }\n  });\n  var route = null;\n\n  if (params.medium) {\n    route = \"/collect2/\" + params.medium;\n    delete params.medium;\n  }\n\n  var fragment = route + \"?\" + qs.stringify(params);\n  window.history.pushState({}, null, fragment);\n};\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(onFilterChange, \"onFilterChange\", \"/Users/eve/development/force/src/desktop/apps/collect2/client.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/apps/collect2/client.js"],"names":["buildClientApp","data","sd","routes","mediator","React","ReactDOM","qs","clone","isArray","on","filters","onFilterChange","context","user","CURRENT_USER","then","ClientApp","hydrate","document","getElementById","catch","error","console","module","hot","accept","params","Object","keys","forEach","filter","length","route","medium","fragment","stringify","window","history","pushState"],"mappings":";;;;;;AAAA,SAASA,cAAT;AACA,SAASC,IAAI,IAAIC,EAAjB,QAA2B,SAA3B;AACA,SAASC,MAAT;AACA,OAAOC,QAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,EAAP,MAAe,aAAf;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,YAA/B,C,CAEA;;AACAL,QAAQ,CAACM,EAAT,CAAY,wBAAZ,EAAsC,UAAAC,OAAO,EAAI;AAC/CC,EAAAA,cAAc,CAACD,OAAD,CAAd;AACD,CAFD;AAIAX,cAAc,CAAC;AACbG,EAAAA,MAAM,EAANA,MADa;AAEbU,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAEZ,EAAE,CAACa,YADF;AAEPX,IAAAA,QAAQ,EAARA;AAFO;AAFI,CAAD,CAAd,CAOGY,IAPH,CAOQ,gBAAmB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AACvBX,EAAAA,QAAQ,CAACY,OAAT,CAAiB,oBAAC,SAAD,OAAjB,EAAgCC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAhC;AACD,CATH,EAUGC,KAVH,CAUS,UAAAC,KAAK,EAAI;AACdC,EAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,CAZH;;AAcA,IAAIE,MAAM,CAACC,GAAX,EAAgB;AACdD,EAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX;AACD,C,CAED;;;AACA,IAAMd,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AAChC,MAAMgB,MAAM,GAAGnB,KAAK,CAACG,OAAD,CAApB;AACAiB,EAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4B,UAAAC,MAAM,EAAI;AACpC,QACE,CAACJ,MAAM,CAACI,MAAD,CAAP,IACCtB,OAAO,CAACkB,MAAM,CAACI,MAAD,CAAP,CAAP,IAA2BJ,MAAM,CAACI,MAAD,CAAN,CAAeC,MAAf,KAA0B,CAFxD,EAGE;AACA,aAAOL,MAAM,CAACI,MAAD,CAAb;AACD;AACF,GAPD;AASA,MAAIE,KAAK,GAAG,IAAZ;;AACA,MAAIN,MAAM,CAACO,MAAX,EAAmB;AACjBD,IAAAA,KAAK,GAAG,eAAeN,MAAM,CAACO,MAA9B;AACA,WAAOP,MAAM,CAACO,MAAd;AACD;;AACD,MAAMC,QAAQ,GAAGF,KAAK,GAAG,GAAR,GAAc1B,EAAE,CAAC6B,SAAH,CAAaT,MAAb,CAA/B;AACAU,EAAAA,MAAM,CAACC,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,IAA7B,EAAmCJ,QAAnC;AACD,CAlBD;;;;;;;;;;;;;0BAAMvB,c","sourcesContent":["import { buildClientApp } from \"reaction/Artsy/Router\"\nimport { data as sd } from \"sharify\"\nimport { routes } from \"reaction/Apps/Collect/routes\"\nimport mediator from \"desktop/lib/mediator.coffee\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport qs from \"querystring\"\nimport { clone, isArray } from \"underscore\"\n\n// TODO: remove in favor of serializing filters from reaction\nmediator.on(\"collect:filter:changed\", filters => {\n  onFilterChange(filters)\n})\n\nbuildClientApp({\n  routes,\n  context: {\n    user: sd.CURRENT_USER,\n    mediator,\n  },\n})\n  .then(({ ClientApp }) => {\n    ReactDOM.hydrate(<ClientApp />, document.getElementById(\"react-root\"))\n  })\n  .catch(error => {\n    console.error(error)\n  })\n\nif (module.hot) {\n  module.hot.accept()\n}\n\n// Update URL with current filters and sort.\nconst onFilterChange = filters => {\n  const params = clone(filters)\n  Object.keys(params).forEach(filter => {\n    if (\n      !params[filter] ||\n      (isArray(params[filter]) && params[filter].length === 0)\n    ) {\n      delete params[filter]\n    }\n  })\n\n  let route = null\n  if (params.medium) {\n    route = \"/collect2/\" + params.medium\n    delete params.medium\n  }\n  const fragment = route + \"?\" + qs.stringify(params)\n  window.history.pushState({}, null, fragment)\n}\n"]}]}