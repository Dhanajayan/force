{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/auction/components/layout/active_bids/MyActiveBids.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/auction/components/layout/active_bids/MyActiveBids.js","mtime":1519227436000},{"path":"/Users/eve/development/force/.babelrc","mtime":1528124541000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime/core-js/object/get-prototype-of\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _ActiveBidItem = _interopRequireDefault(require(\"./ActiveBidItem\"));\n\nvar _react = _interopRequireDefault(require(\"../../../../../components/bid_status/react\"));\n\nvar _me = _interopRequireDefault(require(\"../../../queries/me\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react2 = _interopRequireWildcard(require(\"react\"));\n\nvar _bemCnLite = _interopRequireDefault(require(\"bem-cn-lite\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash.get\"));\n\nvar _metaphysics = _interopRequireDefault(require(\"../../../../../../lib/metaphysics.coffee\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _sharify = require(\"sharify\");\n\nvar MyActiveBids =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2.default)(MyActiveBids, _Component);\n\n  function MyActiveBids() {\n    var _ref;\n\n    var _temp, _this;\n\n    (0, _classCallCheck2.default)(this, MyActiveBids);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (0, _possibleConstructorReturn2.default)(_this, (_temp = _this = (0, _possibleConstructorReturn2.default)(this, (_ref = MyActiveBids.__proto__ || (0, _getPrototypeOf.default)(MyActiveBids)).call.apply(_ref, [this].concat(args))), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: {\n        lotStandings: []\n      }\n    }), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"getFreshData\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function () {\n        var _value = (0, _asyncToGenerator2.default)(\n        /*#__PURE__*/\n        _regenerator.default.mark(function _callee() {\n          var _this$props, saleId, user, _ref2, me;\n\n          return _regenerator.default.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this$props = _this.props, saleId = _this$props.saleId, user = _this$props.user;\n                  _context.prev = 1;\n                  _context.next = 4;\n                  return (0, _metaphysics.default)({\n                    query: (0, _me.default)(saleId),\n                    req: {\n                      user: user\n                    }\n                  });\n\n                case 4:\n                  _ref2 = _context.sent;\n                  me = _ref2.me;\n\n                  _this.setState({\n                    lotStandings: me.lot_standings\n                  });\n\n                  _context.next = 12;\n                  break;\n\n                case 9:\n                  _context.prev = 9;\n                  _context.t0 = _context[\"catch\"](1);\n                  console.error('auction/components/layout/active_bids/MyActiveBids.js', 'Error fetching active bid: ', _context.t0);\n\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[1, 9]]);\n        }));\n\n        return function value() {\n          return _value.apply(this, arguments);\n        };\n      }()\n    }), _temp));\n  }\n\n  (0, _createClass2.default)(MyActiveBids, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        lotStandings: this.props.lotStandings\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.pollInterval = setInterval(this.getFreshData, _sharify.data.ACTIVE_BIDS_POLL_INTERVAL);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearInterval(this.pollInterval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var lotStandings = (0, _lodash.default)(this.state, 'lotStandings', false) || this.props.lotStandings || [];\n      var b = (0, _bemCnLite.default)('auction-MyActiveBids');\n\n      if (!lotStandings.length) {\n        return null;\n      }\n\n      return _react2.default.createElement(\"div\", {\n        className: b()\n      }, _react2.default.createElement(\"h2\", null, \"Your Active Bids\"), lotStandings.filter(function (bid) {\n        return bid.sale_artwork;\n      }).map(function (bid, key) {\n        return _react2.default.createElement(_ActiveBidItem.default, (0, _extends2.default)({}, bid.sale_artwork, {\n          BidStatus: _react.default,\n          bid: bid,\n          key: key\n        }));\n      }));\n    }\n  }]);\n  return MyActiveBids;\n}(_react2.Component);\n\nObject.defineProperty(MyActiveBids, \"propTypes\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    lotStandings: _propTypes.default.array,\n    saleId: _propTypes.default.string.isRequired,\n    user: _propTypes.default.object\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var app = state.app;\n  return {\n    lotStandings: app.me.lot_standings,\n    saleId: app.auction.get('id'),\n    user: app.user\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps)(MyActiveBids);\n\nexports.default = _default;",{"version":3,"sources":["src/desktop/apps/auction/components/layout/active_bids/MyActiveBids.js"],"names":["MyActiveBids","lotStandings","props","saleId","user","query","req","me","setState","lot_standings","console","error","pollInterval","setInterval","getFreshData","ACTIVE_BIDS_POLL_INTERVAL","clearInterval","state","b","length","filter","bid","sale_artwork","map","key","array","string","isRequired","object","mapStateToProps","app","auction","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;IAEMA,Y;;;;;;;;;;;;;;;;;;;;aAOI;AACNC,sBAAc;AADR;;;;;;;;kCAkBO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCACY,MAAKC,KADjB,EACLC,MADK,eACLA,MADK,EACGC,IADH,eACGA,IADH;AAAA;AAAA;AAAA,yBAIU,0BAAY;AAC/BC,2BAAO,iBAAQF,MAAR,CADwB;AAE/BG,yBAAK;AACHF;AADG;AAF0B,mBAAZ,CAJV;;AAAA;AAAA;AAIHG,oBAJG,SAIHA,EAJG;;AAWX,wBAAKC,QAAL,CAAc;AACZP,kCAAcM,GAAGE;AADL,mBAAd;;AAXW;AAAA;;AAAA;AAAA;AAAA;AAeXC,0BAAQC,KAAR,CACE,uDADF,EAEE,6BAFF;;AAfW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,S;;;;;;;;;;;yCAdO;AACpB,WAAKH,QAAL,CAAc;AACZP,sBAAc,KAAKC,KAAL,CAAWD;AADb,OAAd;AAGD;;;wCAEoB;AACnB,WAAKW,YAAL,GAAoBC,YAAY,KAAKC,YAAjB,EAA+B,cAAGC,yBAAlC,CAApB;AACD;;;2CAEuB;AACtB,WAAKC,aAAL,CAAmB,KAAKJ,YAAxB;AACD;;;6BAwBS;AACR,UAAMX,eAAe,qBAAI,KAAKgB,KAAT,EAAgB,cAAhB,EAAgC,KAAhC,KAA0C,KAAKf,KAAL,CAAWD,YAArD,IAAqE,EAA1F;AACA,UAAMiB,IAAI,wBAAM,sBAAN,CAAV;;AAEA,UAAI,CAACjB,aAAakB,MAAlB,EAA0B;AACxB,eAAO,IAAP;AACD;;AAED,aACE;AAAK,mBAAWD;AAAhB,SACE,6DADF,EAKIjB,aACCmB,MADD,CACQ;AAAA,eAAOC,IAAIC,YAAX;AAAA,OADR,EAECC,GAFD,CAEK,UAACF,GAAD,EAAMG,GAAN,EAAc;AACjB,eACE,iFACMH,IAAIC,YADV;AAEE,mCAFF;AAGE,eAAKD,GAHP;AAIE,eAAKG;AAJP,WADF;AAQD,OAXD,CALJ,CADF;AAoBD;;;;;sBA3EGxB,Y;;;;SACe;AACjBC,kBAAc,mBAAUwB,KADP;AAEjBtB,YAAQ,mBAAUuB,MAAV,CAAiBC,UAFR;AAGjBvB,UAAM,mBAAUwB;AAHC;;;AA6ErB,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACZ,KAAD,EAAW;AAAA,MACzBa,GADyB,GACjBb,KADiB,CACzBa,GADyB;AAGjC,SAAO;AACL7B,kBAAc6B,IAAIvB,EAAJ,CAAOE,aADhB;AAELN,YAAQ2B,IAAIC,OAAJ,CAAYC,GAAZ,CAAgB,IAAhB,CAFH;AAGL5B,UAAM0B,IAAI1B;AAHL,GAAP;AAKD,CARD;;eAUe,yBACbyB,eADa,EAEb7B,YAFa,C","file":"/Users/eve/development/force/src/desktop/apps/auction/components/layout/active_bids/MyActiveBids.js","sourceRoot":"/Users/eve/development/force","sourcesContent":["import ActiveBidItem from 'desktop/apps/auction/components/layout/active_bids/ActiveBidItem'\nimport BidStatus from 'desktop/components/bid_status/react'\nimport MeQuery from 'desktop/apps/auction/queries/me'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport block from 'bem-cn-lite'\nimport get from 'lodash.get'\nimport metaphysics from 'lib/metaphysics.coffee'\nimport { connect } from 'react-redux'\nimport { data as sd } from 'sharify'\n\nclass MyActiveBids extends Component {\n  static propTypes = {\n    lotStandings: PropTypes.array,\n    saleId: PropTypes.string.isRequired,\n    user: PropTypes.object\n  }\n\n  state = {\n    lotStandings: []\n  }\n\n  componentWillMount () {\n    this.setState({\n      lotStandings: this.props.lotStandings\n    })\n  }\n\n  componentDidMount () {\n    this.pollInterval = setInterval(this.getFreshData, sd.ACTIVE_BIDS_POLL_INTERVAL)\n  }\n\n  componentWillUnmount () {\n    this.clearInterval(this.pollInterval)\n  }\n\n  getFreshData = async () => {\n    const { saleId, user } = this.props\n\n    try {\n      const { me } = await metaphysics({\n        query: MeQuery(saleId),\n        req: {\n          user\n        }\n      })\n\n      this.setState({\n        lotStandings: me.lot_standings\n      })\n    } catch (error) {\n      console.error(\n        'auction/components/layout/active_bids/MyActiveBids.js',\n        'Error fetching active bid: ', error\n      )\n    }\n  }\n\n  render () {\n    const lotStandings = get(this.state, 'lotStandings', false) || this.props.lotStandings || []\n    const b = block('auction-MyActiveBids')\n\n    if (!lotStandings.length) {\n      return null\n    }\n\n    return (\n      <div className={b()}>\n        <h2>\n          Your Active Bids\n        </h2>\n\n        { lotStandings\n          .filter(bid => bid.sale_artwork)\n          .map((bid, key) => {\n            return (\n              <ActiveBidItem\n                {...bid.sale_artwork}\n                BidStatus={BidStatus}\n                bid={bid}\n                key={key}\n              />\n            )\n          })}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { app } = state\n\n  return {\n    lotStandings: app.me.lot_standings,\n    saleId: app.auction.get('id'),\n    user: app.user\n  }\n}\n\nexport default connect(\n  mapStateToProps\n)(MyActiveBids)\n"]}]}