{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js","mtime":1521064653000},{"path":"/Users/eve/development/force/.babelrc","mtime":1528124541000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.test = exports.default = void 0;\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime/core-js/object/get-prototype-of\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _InfiniteScroll2 = _interopRequireDefault(require(\"../../../../../components/react/infinite_scroll/InfiniteScroll\"));\n\nvar _react = _interopRequireDefault(require(\"../../../../../components/jump/react\"));\n\nvar _MasonryArtwork2 = _interopRequireDefault(require(\"./artwork/MasonryArtwork\"));\n\nvar _GridArtwork2 = _interopRequireDefault(require(\"./artwork/GridArtwork\"));\n\nvar _ListArtwork2 = _interopRequireDefault(require(\"./artwork/ListArtwork\"));\n\nvar _LoadingSpinner = _interopRequireDefault(require(\"./LoadingSpinner\"));\n\nvar _MasonryGrid2 = _interopRequireDefault(require(\"../../../../../components/react/masonry_grid/MasonryGrid\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react2 = _interopRequireWildcard(require(\"react\"));\n\nvar _bemCnLite = _interopRequireDefault(require(\"bem-cn-lite\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash.get\"));\n\nvar _artworkBrowser = require(\"../../../actions/artworkBrowser\");\n\nvar _reactRedux = require(\"react-redux\");\n\n// FIXME: Rewire\nvar InfiniteScroll = _InfiniteScroll2.default;\nvar Jump = _react.default;\nvar MasonryArtwork = _MasonryArtwork2.default;\nvar GridArtwork = _GridArtwork2.default;\nvar ListArtwork = _ListArtwork2.default;\nvar MasonryGrid = _MasonryGrid2.default;\n\nvar ArtworkDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2.default)(ArtworkDisplay, _Component);\n\n  function ArtworkDisplay() {\n    var _ref;\n\n    var _temp, _this;\n\n    (0, _classCallCheck2.default)(this, ArtworkDisplay);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (0, _possibleConstructorReturn2.default)(_this, (_temp = _this = (0, _possibleConstructorReturn2.default)(this, (_ref = ArtworkDisplay.__proto__ || (0, _getPrototypeOf.default)(ArtworkDisplay)).call.apply(_ref, [this].concat(args))), Object.defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: {\n        isMounted: false\n      }\n    }), _temp));\n  }\n\n  (0, _createClass2.default)(ArtworkDisplay, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isMounted: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          infiniteScrollAction = _props.infiniteScrollAction,\n          isFetchingArtworks = _props.isFetchingArtworks,\n          isListView = _props.isListView,\n          isMobile = _props.isMobile,\n          saleArtworks = _props.saleArtworks;\n      var listType = isListView ? '--list' : '';\n      var calculateScrollPosition = isMobile && this.state.isMounted && isFetchingArtworks;\n      var showFullScreenSpinner = false;\n\n      if (calculateScrollPosition) {\n        showFullScreenSpinner = window.scrollY < window.innerHeight;\n      }\n\n      var b = (0, _bemCnLite.default)('auction-page-ArtworkDisplay');\n      return _react2.default.createElement(InfiniteScroll, {\n        triggerElement: \".auction-page-ArtworkDisplay, .auction-page-ArtworkDisplay__artworks--list\",\n        onTrigger: infiniteScrollAction\n      }, _react2.default.createElement(\"div\", {\n        className: b()\n      }, _react2.default.createElement(\"div\", {\n        className: b(\"artworks\".concat(listType))\n      }, showFullScreenSpinner && _react2.default.createElement(_LoadingSpinner.default, {\n        fullscreen: true\n      }), function () {\n        if (isMobile) {\n          if (isListView) {\n            return _react2.default.createElement(\"div\", null, saleArtworks.map(function (saleArtwork, key) {\n              return _react2.default.createElement(ListArtwork, {\n                saleArtwork: saleArtwork,\n                key: key\n              });\n            }), _react2.default.createElement(_LoadingSpinner.default, null)); // GridView\n          } else {\n            return _react2.default.createElement(\"div\", null, _react2.default.createElement(MasonryGrid, {\n              columnCount: 2,\n              items: saleArtworks,\n              mask: false,\n              getAspectRatio: function getAspectRatio(saleArtwork) {\n                return (0, _lodash.default)(saleArtwork, 'artwork.images.0.aspect_ratio');\n              },\n              getDisplayComponent: function getDisplayComponent(saleArtwork) {\n                return _react2.default.createElement(MasonryArtwork, {\n                  saleArtwork: saleArtwork\n                });\n              }\n            }), _react2.default.createElement(_LoadingSpinner.default, null));\n          } // Desktop\n\n        } else {\n          var DisplayComponent = isListView ? ListArtwork : GridArtwork;\n          return _react2.default.createElement(\"div\", null, saleArtworks.map(function (saleArtwork) {\n            return _react2.default.createElement(DisplayComponent, {\n              key: saleArtwork.id,\n              saleArtwork: saleArtwork\n            });\n          }), _react2.default.createElement(Jump, {\n            threshold: typeof window !== 'undefined' ? window.innerHeight * 2 : 0,\n            direction: \"bottom\",\n            element: \".auction-artworks-HeaderDesktop\",\n            offset: \".mlh-navbar\"\n          }), _react2.default.createElement(_LoadingSpinner.default, null));\n        }\n      }())));\n    }\n  }]);\n  return ArtworkDisplay;\n}(_react2.Component);\n\nObject.defineProperty(ArtworkDisplay, \"propTypes\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    infiniteScrollAction: _propTypes.default.func.isRequired,\n    isFetchingArtworks: _propTypes.default.bool.isRequired,\n    isListView: _propTypes.default.bool.isRequired,\n    isMobile: _propTypes.default.bool.isRequired,\n    saleArtworks: _propTypes.default.array.isRequired\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$app = state.app,\n      auction = _state$app.auction,\n      isMobile = _state$app.isMobile;\n  return {\n    allFetched: state.artworkBrowser.allFetched,\n    isFetchingArtworks: state.artworkBrowser.isFetchingArtworks,\n    isListView: state.artworkBrowser.isListView,\n    isMobile: isMobile,\n    isClosed: auction.isClosed(),\n    saleArtworks: state.artworkBrowser.saleArtworks,\n    saleId: auction.get('id')\n  };\n};\n\nvar mapDispatchToProps = {\n  infiniteScrollAction: _artworkBrowser.infiniteScroll\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ArtworkDisplay);\n\nexports.default = _default;\nvar test = {\n  ArtworkDisplay: ArtworkDisplay\n};\nexports.test = test;",{"version":3,"sources":["src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js"],"names":["InfiniteScroll","Jump","MasonryArtwork","GridArtwork","ListArtwork","MasonryGrid","ArtworkDisplay","isMounted","setState","props","infiniteScrollAction","isFetchingArtworks","isListView","isMobile","saleArtworks","listType","calculateScrollPosition","state","showFullScreenSpinner","window","scrollY","innerHeight","b","map","saleArtwork","key","DisplayComponent","id","func","isRequired","bool","array","mapStateToProps","app","auction","allFetched","artworkBrowser","isClosed","saleId","get","mapDispatchToProps","test"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA,IAAIA,yCAAJ;AACA,IAAIC,qBAAJ;AACA,IAAIC,yCAAJ;AACA,IAAIC,mCAAJ;AACA,IAAIC,mCAAJ;AACA,IAAIC,mCAAJ;;IAEMC,c;;;;;;;;;;;;;;;;;;;;aASI;AACNC,mBAAW;AADL;;;;;;wCAIa;AACnB,WAAKC,QAAL,CAAc;AACZD,mBAAW;AADC,OAAd;AAGD;;;6BAES;AAAA,mBAOJ,KAAKE,KAPD;AAAA,UAENC,oBAFM,UAENA,oBAFM;AAAA,UAGNC,kBAHM,UAGNA,kBAHM;AAAA,UAINC,UAJM,UAINA,UAJM;AAAA,UAKNC,QALM,UAKNA,QALM;AAAA,UAMNC,YANM,UAMNA,YANM;AASR,UAAMC,WAAWH,aAAa,QAAb,GAAwB,EAAzC;AAEA,UAAMI,0BAA0BH,YAAY,KAAKI,KAAL,CAAWV,SAAvB,IAAoCI,kBAApE;AACA,UAAIO,wBAAwB,KAA5B;;AAEA,UAAIF,uBAAJ,EAA6B;AAC3BE,gCAAwBC,OAAOC,OAAP,GAAiBD,OAAOE,WAAhD;AACD;;AAED,UAAMC,IAAI,wBAAM,6BAAN,CAAV;AAEA,aACE,8BAAC,cAAD;AACE,wBAAe,4EADjB;AAEE,mBAAWZ;AAFb,SAIE;AAAK,mBAAWY;AAAhB,SACE;AAAK,mBAAWA,oBAAaP,QAAb;AAAhB,SACIG,yBACA;AAAgB;AAAhB,QAFJ,EAII,YAAM;AACN,YAAIL,QAAJ,EAAc;AACZ,cAAID,UAAJ,EAAgB;AACd,mBACE,2CACIE,aAAaS,GAAb,CAAiB,UAACC,WAAD,EAAcC,GAAd;AAAA,qBACjB,8BAAC,WAAD;AACE,6BAAaD,WADf;AAEE,qBAAKC;AAFP,gBADiB;AAAA,aAAjB,CADJ,EAQE,4DARF,CADF,CADc,CAcd;AACD,WAfD,MAeO;AACL,mBACE,2CACE,8BAAC,WAAD;AACE,2BAAa,CADf;AAEE,qBAAOX,YAFT;AAGE,oBAAM,KAHR;AAIE,8BAAgB,wBAACU,WAAD,EAAiB;AAC/B,uBAAO,qBAAIA,WAAJ,EAAiB,+BAAjB,CAAP;AACD,eANH;AAOE,mCAAqB,6BAACA,WAAD,EAAiB;AACpC,uBACE,8BAAC,cAAD;AACE,+BAAaA;AADf,kBADF;AAKD;AAbH,cADF,EAiBE,4DAjBF,CADF;AAqBD,WAtCW,CAwCZ;;AACD,SAzCD,MAyCO;AACL,cAAME,mBAAmBd,aAAaR,WAAb,GAA2BD,WAApD;AAEA,iBACE,2CACIW,aAAaS,GAAb,CAAiB,UAACC,WAAD;AAAA,mBACjB,8BAAC,gBAAD;AACE,mBAAKA,YAAYG,EADnB;AAEE,2BAAaH;AAFf,cADiB;AAAA,WAAjB,CADJ,EAQE,8BAAC,IAAD;AACE,uBAAW,OAAOL,MAAP,KAAkB,WAAlB,GAAgCA,OAAOE,WAAP,GAAqB,CAArD,GAAyD,CADtE;AAEE,uBAAU,QAFZ;AAGE,qBAAQ,iCAHV;AAIE,oBAAO;AAJT,YARF,EAeE,4DAfF,CADF;AAmBD;AACF,OAjEA,EAJH,CADF,CAJF,CADF;AAgFD;;;;;sBAvHGf,c;;;;SACe;AACjBI,0BAAsB,mBAAUkB,IAAV,CAAeC,UADpB;AAEjBlB,wBAAoB,mBAAUmB,IAAV,CAAeD,UAFlB;AAGjBjB,gBAAY,mBAAUkB,IAAV,CAAeD,UAHV;AAIjBhB,cAAU,mBAAUiB,IAAV,CAAeD,UAJR;AAKjBf,kBAAc,mBAAUiB,KAAV,CAAgBF;AALb;;;AAyHrB,IAAMG,kBAAkB,SAAlBA,eAAkB,CAACf,KAAD,EAAW;AAAA,mBACHA,MAAMgB,GADH;AAAA,MACzBC,OADyB,cACzBA,OADyB;AAAA,MAChBrB,QADgB,cAChBA,QADgB;AAGjC,SAAO;AACLsB,gBAAYlB,MAAMmB,cAAN,CAAqBD,UAD5B;AAELxB,wBAAoBM,MAAMmB,cAAN,CAAqBzB,kBAFpC;AAGLC,gBAAYK,MAAMmB,cAAN,CAAqBxB,UAH5B;AAILC,sBAJK;AAKLwB,cAAUH,QAAQG,QAAR,EALL;AAMLvB,kBAAcG,MAAMmB,cAAN,CAAqBtB,YAN9B;AAOLwB,YAAQJ,QAAQK,GAAR,CAAY,IAAZ;AAPH,GAAP;AASD,CAZD;;AAcA,IAAMC,qBAAqB;AACzB9B;AADyB,CAA3B;;eAIe,yBACbsB,eADa,EAEbQ,kBAFa,EAGblC,cAHa,C;;;AAKR,IAAMmC,OAAO;AAAEnC;AAAF,CAAb","file":"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/main/ArtworkDisplay.js","sourceRoot":"/Users/eve/development/force","sourcesContent":["import _InfiniteScroll from 'desktop/components/react/infinite_scroll/InfiniteScroll'\nimport _Jump from 'desktop/components/jump/react'\nimport _MasonryArtwork from 'desktop/apps/auction/components/artwork_browser/main/artwork/MasonryArtwork'\nimport _GridArtwork from 'desktop/apps/auction/components/artwork_browser/main/artwork/GridArtwork'\nimport _ListArtwork from 'desktop/apps/auction/components/artwork_browser/main/artwork/ListArtwork'\nimport LoadingSpinner from 'desktop/apps/auction/components/artwork_browser/main/LoadingSpinner'\nimport _MasonryGrid from 'desktop/components/react/masonry_grid/MasonryGrid'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport block from 'bem-cn-lite'\nimport get from 'lodash.get'\nimport { infiniteScroll } from 'desktop/apps/auction/actions/artworkBrowser'\nimport { connect } from 'react-redux'\n\n// FIXME: Rewire\nlet InfiniteScroll = _InfiniteScroll\nlet Jump = _Jump\nlet MasonryArtwork = _MasonryArtwork\nlet GridArtwork = _GridArtwork\nlet ListArtwork = _ListArtwork\nlet MasonryGrid = _MasonryGrid\n\nclass ArtworkDisplay extends Component {\n  static propTypes = {\n    infiniteScrollAction: PropTypes.func.isRequired,\n    isFetchingArtworks: PropTypes.bool.isRequired,\n    isListView: PropTypes.bool.isRequired,\n    isMobile: PropTypes.bool.isRequired,\n    saleArtworks: PropTypes.array.isRequired\n  }\n\n  state = {\n    isMounted: false\n  }\n\n  componentDidMount () {\n    this.setState({\n      isMounted: true\n    })\n  }\n\n  render () {\n    const {\n      infiniteScrollAction,\n      isFetchingArtworks,\n      isListView,\n      isMobile,\n      saleArtworks\n    } = this.props\n\n    const listType = isListView ? '--list' : ''\n\n    const calculateScrollPosition = isMobile && this.state.isMounted && isFetchingArtworks\n    let showFullScreenSpinner = false\n\n    if (calculateScrollPosition) {\n      showFullScreenSpinner = window.scrollY < window.innerHeight\n    }\n\n    const b = block('auction-page-ArtworkDisplay')\n\n    return (\n      <InfiniteScroll\n        triggerElement='.auction-page-ArtworkDisplay, .auction-page-ArtworkDisplay__artworks--list'\n        onTrigger={infiniteScrollAction}\n      >\n        <div className={b()}>\n          <div className={b(`artworks${listType}`)}>\n            { showFullScreenSpinner &&\n              <LoadingSpinner fullscreen /> }\n\n            {(() => {\n              if (isMobile) {\n                if (isListView) {\n                  return (\n                    <div>\n                      { saleArtworks.map((saleArtwork, key) => (\n                        <ListArtwork\n                          saleArtwork={saleArtwork}\n                          key={key}\n                        />\n                      ))}\n\n                      <LoadingSpinner />\n                    </div>\n                  )\n\n                  // GridView\n                } else {\n                  return (\n                    <div>\n                      <MasonryGrid\n                        columnCount={2}\n                        items={saleArtworks}\n                        mask={false}\n                        getAspectRatio={(saleArtwork) => {\n                          return get(saleArtwork, 'artwork.images.0.aspect_ratio')\n                        }}\n                        getDisplayComponent={(saleArtwork) => {\n                          return (\n                            <MasonryArtwork\n                              saleArtwork={saleArtwork}\n                            />\n                          )\n                        }}\n                      />\n\n                      <LoadingSpinner />\n                    </div>\n                  )\n                }\n\n                // Desktop\n              } else {\n                const DisplayComponent = isListView ? ListArtwork : GridArtwork\n\n                return (\n                  <div>\n                    { saleArtworks.map((saleArtwork) => (\n                      <DisplayComponent\n                        key={saleArtwork.id}\n                        saleArtwork={saleArtwork}\n                      />\n                    ))}\n\n                    <Jump\n                      threshold={typeof window !== 'undefined' ? window.innerHeight * 2 : 0}\n                      direction='bottom'\n                      element='.auction-artworks-HeaderDesktop'\n                      offset='.mlh-navbar'\n                    />\n\n                    <LoadingSpinner />\n                  </div>\n                )\n              }\n            })()}\n          </div>\n        </div>\n      </InfiniteScroll>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { auction, isMobile } = state.app\n\n  return {\n    allFetched: state.artworkBrowser.allFetched,\n    isFetchingArtworks: state.artworkBrowser.isFetchingArtworks,\n    isListView: state.artworkBrowser.isListView,\n    isMobile,\n    isClosed: auction.isClosed(),\n    saleArtworks: state.artworkBrowser.saleArtworks,\n    saleId: auction.get('id')\n  }\n}\n\nconst mapDispatchToProps = {\n  infiniteScrollAction: infiniteScroll\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ArtworkDisplay)\n\nexport const test = { ArtworkDisplay }\n"]}]}