{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/node_modules/@artsy/reaction/src/Components/Truncator.tsx","dependencies":[{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/src/Components/Truncator.tsx","mtime":1530111312000},{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/.babelrc","mtime":1529423546000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Truncator = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _server = _interopRequireDefault(require(\"react-dom/server\"));\n\nvar _ErrorBoundary = require(\"./ErrorBoundary\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Truncator = function Truncator(_ref) {\n  var ReadMoreLink = _ref.ReadMoreLink,\n      children = _ref.children,\n      ellipsis = _ref.ellipsis,\n      maxLineCount = _ref.maxLineCount;\n\n  var html = _server.default.renderToStaticMarkup(_react.default.createElement(\"span\", null, children));\n\n  var readMoreHTML = null;\n\n  if (ReadMoreLink) {\n    readMoreHTML = _server.default.renderToStaticMarkup(ReadMoreLink());\n  } // FIXME: Make safe for tests\n\n\n  var HTMLEllipsis;\n\n  if (process.env.NODE_ENV !== \"test\") {\n    var responsiveHOC = require(\"react-lines-ellipsis/lib/responsiveHOC\");\n\n    HTMLEllipsis = responsiveHOC()(require(\"react-lines-ellipsis/lib/html\"));\n  } else {\n    HTMLEllipsis = function HTMLEllipsis(_ref2) {\n      var unsafeHTML = _ref2.unsafeHTML;\n      return _react.default.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: unsafeHTML\n        }\n      });\n    };\n  }\n\n  return _react.default.createElement(_ErrorBoundary.ErrorBoundary, null, _react.default.createElement(HTMLEllipsis, {\n    unsafeHTML: html,\n    maxLine: maxLineCount || 2,\n    ellipsis: ellipsis,\n    ellipsisHTML: readMoreHTML\n  }));\n};\n\nexports.Truncator = Truncator;",{"version":3,"sources":["node_modules/@artsy/reaction/src/Components/Truncator.tsx"],"names":["Truncator","ReadMoreLink","children","ellipsis","maxLineCount","html","renderToStaticMarkup","readMoreHTML","HTMLEllipsis","process","env","NODE_ENV","responsiveHOC","require","unsafeHTML","__html"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAQO,IAAMA,YAA8B,SAA9BA,SAA8B,OAKrC;AAAA,MAJJC,YAII,QAJJA,YAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADJC,YACI,QADJA,YACI;;AACJ,MAAMC,OAAO,gBAASC,oBAAT,CAA8B,2CAAOJ,QAAP,CAA9B,CAAb;;AACA,MAAIK,eAAe,IAAnB;;AAEA,MAAIN,YAAJ,EAAkB;AAChBM,mBAAe,gBAASD,oBAAT,CAA8BL,cAA9B,CAAf;AACD,GANG,CAQJ;;;AACA,MAAIO,YAAJ;;AAEA,MAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,QAAMC,gBAAgBC,QAAQ,wCAAR,CAAtB;;AACAL,mBAAeI,gBAAgBC,QAAQ,+BAAR,CAAhB,CAAf;AACD,GAHD,MAGO;AACLL,mBAAe;AAAA,UAAGM,UAAH,SAAGA,UAAH;AAAA,aACb;AACE,iCAAyB;AACvBC,kBAAQD;AADe;AAD3B,QADa;AAAA,KAAf;AAOD;;AAED,SACE,iEACE,6BAAC,YAAD;AACE,gBAAYT,IADd;AAEE,aAASD,gBAAgB,CAF3B;AAGE,cAAUD,QAHZ;AAIE,kBAAcI;AAJhB,IADF,CADF;AAUD,CAvCM","file":"/Users/eve/development/force/node_modules/@artsy/reaction/src/Components/Truncator.tsx","sourceRoot":"/Users/eve/development/force","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom/server\"\nimport { ErrorBoundary } from \"./ErrorBoundary\"\n\ninterface Props {\n  maxLineCount?: number\n  ellipsis?: string\n  ReadMoreLink?: () => any\n}\n\nexport const Truncator: React.SFC<Props> = ({\n  ReadMoreLink,\n  children,\n  ellipsis,\n  maxLineCount,\n}) => {\n  const html = ReactDOM.renderToStaticMarkup(<span>{children}</span>)\n  let readMoreHTML = null\n\n  if (ReadMoreLink) {\n    readMoreHTML = ReactDOM.renderToStaticMarkup(ReadMoreLink())\n  }\n\n  // FIXME: Make safe for tests\n  let HTMLEllipsis\n\n  if (process.env.NODE_ENV !== \"test\") {\n    const responsiveHOC = require(\"react-lines-ellipsis/lib/responsiveHOC\")\n    HTMLEllipsis = responsiveHOC()(require(\"react-lines-ellipsis/lib/html\"))\n  } else {\n    HTMLEllipsis = ({ unsafeHTML }) => (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: unsafeHTML,\n        }}\n      />\n    )\n  }\n\n  return (\n    <ErrorBoundary>\n      <HTMLEllipsis\n        unsafeHTML={html}\n        maxLine={maxLineCount || 2}\n        ellipsis={ellipsis}\n        ellipsisHTML={readMoreHTML}\n      />\n    </ErrorBoundary>\n  )\n}\n"]}]}