{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/auctions2/actions/appActions.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/auctions2/actions/appActions.js","mtime":1519227436000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport metaphysics from \"../../../../lib/metaphysics.coffee\";\nimport { currentAuctions } from \"../utils/queries\";\nexport var GET_AUCTIONS_REQUEST = 'GET_AUCTIONS_REQUEST';\nexport var GET_AUCTIONS_FAILURE = 'GET_AUCTIONS_FAILURE';\nexport var GET_AUCTIONS_SUCCESS = 'GET_AUCTIONS_SUCCESS';\nexport function getAuctionsRequest() {\n  return {\n    type: GET_AUCTIONS_REQUEST\n  };\n}\nexport function getAuctionsFailure() {\n  return {\n    type: GET_AUCTIONS_FAILURE\n  };\n}\nexport function getAuctionsSuccess(auctions) {\n  return {\n    type: GET_AUCTIONS_SUCCESS,\n    payload: {\n      auctions: auctions\n    }\n  };\n}\nexport function getCurrentAuctions() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var fetchedAuctions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                dispatch(getAuctionsRequest());\n                _context.next = 4;\n                return metaphysics({\n                  query: currentAuctions()\n                });\n\n              case 4:\n                fetchedAuctions = _context.sent;\n                dispatch(getAuctionsSuccess(fetchedAuctions.sales));\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                dispatch(getAuctionsFailure());\n                console.error('error!', _context.t0);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(GET_AUCTIONS_REQUEST, \"GET_AUCTIONS_REQUEST\", \"/Users/eve/development/force/src/desktop/apps/auctions2/actions/appActions.js\");\n  reactHotLoader.register(GET_AUCTIONS_FAILURE, \"GET_AUCTIONS_FAILURE\", \"/Users/eve/development/force/src/desktop/apps/auctions2/actions/appActions.js\");\n  reactHotLoader.register(GET_AUCTIONS_SUCCESS, \"GET_AUCTIONS_SUCCESS\", \"/Users/eve/development/force/src/desktop/apps/auctions2/actions/appActions.js\");\n  reactHotLoader.register(getAuctionsRequest, \"getAuctionsRequest\", \"/Users/eve/development/force/src/desktop/apps/auctions2/actions/appActions.js\");\n  reactHotLoader.register(getAuctionsFailure, \"getAuctionsFailure\", \"/Users/eve/development/force/src/desktop/apps/auctions2/actions/appActions.js\");\n  reactHotLoader.register(getAuctionsSuccess, \"getAuctionsSuccess\", \"/Users/eve/development/force/src/desktop/apps/auctions2/actions/appActions.js\");\n  reactHotLoader.register(getCurrentAuctions, \"getCurrentAuctions\", \"/Users/eve/development/force/src/desktop/apps/auctions2/actions/appActions.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/apps/auctions2/actions/appActions.js"],"names":["metaphysics","currentAuctions","GET_AUCTIONS_REQUEST","GET_AUCTIONS_FAILURE","GET_AUCTIONS_SUCCESS","getAuctionsRequest","type","getAuctionsFailure","getAuctionsSuccess","auctions","payload","getCurrentAuctions","dispatch","query","fetchedAuctions","sales","console","error"],"mappings":";;;;;;;;;AAAA,OAAOA,WAAP;AACA,SAASC,eAAT;AAEA,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AAEP,OAAO,SAASC,kBAAT,GAA+B;AACpC,SAAO;AACLC,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD;AAED,OAAO,SAASK,kBAAT,GAA+B;AACpC,SAAO;AACLD,IAAAA,IAAI,EAAEH;AADD,GAAP;AAGD;AAED,OAAO,SAASK,kBAAT,CAA6BC,QAA7B,EAAuC;AAC5C,SAAO;AACLH,IAAAA,IAAI,EAAEF,oBADD;AAELM,IAAAA,OAAO,EAAE;AACPD,MAAAA,QAAQ,EAARA;AADO;AAFJ,GAAP;AAMD;AAED,OAAO,SAASE,kBAAT,GAA8B;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHA,gBAAAA,QAAQ,CAACP,kBAAkB,EAAnB,CAAR;AAFG;AAAA,uBAG2BL,WAAW,CAAC;AACxCa,kBAAAA,KAAK,EAAEZ,eAAe;AADkB,iBAAD,CAHtC;;AAAA;AAGGa,gBAAAA,eAHH;AAMHF,gBAAAA,QAAQ,CAACJ,kBAAkB,CAACM,eAAe,CAACC,KAAjB,CAAnB,CAAR;AANG;AAAA;;AAAA;AAAA;AAAA;AAQHH,gBAAAA,QAAQ,CAACL,kBAAkB,EAAnB,CAAR;AACAS,gBAAAA,OAAO,CAACC,KAAR,CAAc,QAAd;;AATG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAYD;;;;;;;;;;;;0BAtCYf,oB;0BACAC,oB;0BACAC,oB;0BAEGC,kB;0BAMAE,kB;0BAMAC,kB;0BASAG,kB","sourcesContent":["import metaphysics from 'lib/metaphysics.coffee'\nimport { currentAuctions } from 'desktop/apps/auctions2/utils/queries'\n\nexport const GET_AUCTIONS_REQUEST = 'GET_AUCTIONS_REQUEST'\nexport const GET_AUCTIONS_FAILURE = 'GET_AUCTIONS_FAILURE'\nexport const GET_AUCTIONS_SUCCESS = 'GET_AUCTIONS_SUCCESS'\n\nexport function getAuctionsRequest () {\n  return {\n    type: GET_AUCTIONS_REQUEST\n  }\n}\n\nexport function getAuctionsFailure () {\n  return {\n    type: GET_AUCTIONS_FAILURE\n  }\n}\n\nexport function getAuctionsSuccess (auctions) {\n  return {\n    type: GET_AUCTIONS_SUCCESS,\n    payload: {\n      auctions\n    }\n  }\n}\n\nexport function getCurrentAuctions() {\n  return async (dispatch) => {\n    try {\n      dispatch(getAuctionsRequest())\n      const fetchedAuctions = await metaphysics({\n        query: currentAuctions()\n      })\n      dispatch(getAuctionsSuccess(fetchedAuctions.sales))\n    } catch (error) {\n      dispatch(getAuctionsFailure())\n      console.error('error!', error)\n    }\n  }\n}\n"]}]}