{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/sidebar/MediumFilter.js","dependencies":[{"path":"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/sidebar/MediumFilter.js","mtime":1521064653000},{"path":"/Users/eve/development/force/.babelrc","mtime":1537178749000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport _BasicCheckbox from \"./BasicCheckbox\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport _, { contains } from 'underscore';\nimport block from 'bem-cn-lite';\nimport { connect } from 'react-redux';\nimport { updateMediumParams } from \"../../../actions/artworkBrowser\"; // FIXME: Rewire\n\nvar BasicCheckbox = _BasicCheckbox;\n\nfunction MediumFilter(props) {\n  var aggregatedMediums = props.aggregatedMediums,\n      allMediums = props.allMediums,\n      mediumIds = props.mediumIds,\n      updateMediumParamsAction = props.updateMediumParamsAction,\n      allMediumsSelected = props.allMediumsSelected,\n      initialMediumMap = props.initialMediumMap;\n  var b = block('auction-MediumFilter');\n  return React.createElement(\"div\", {\n    className: b()\n  }, React.createElement(\"div\", {\n    className: b('title')\n  }, \"Medium\"), React.createElement(BasicCheckbox, {\n    key: allMediums.id,\n    item: allMediums,\n    onClick: updateMediumParamsAction,\n    checked: allMediumsSelected\n  }), _.map(initialMediumMap, function (initialAgg) {\n    var mediumSelected = contains(mediumIds, initialAgg.id);\n\n    var includedMedium = _.find(aggregatedMediums, function (agg) {\n      return agg.id === initialAgg.id;\n    });\n\n    return React.createElement(BasicCheckbox, {\n      key: initialAgg.id,\n      item: {\n        id: initialAgg.id,\n        name: initialAgg.name,\n        count: includedMedium && includedMedium.count\n      },\n      onClick: updateMediumParamsAction,\n      checked: mediumSelected,\n      disabled: includedMedium === undefined\n    });\n  }));\n}\n\nMediumFilter.propTypes = {\n  aggregatedMediums: PropTypes.array.isRequired,\n  allMediums: PropTypes.object.isRequired,\n  allMediumsSelected: PropTypes.bool.isRequired,\n  initialMediumMap: PropTypes.array.isRequired,\n  mediumIds: PropTypes.array.isRequired,\n  updateMediumParamsAction: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$artworkBrowser = state.artworkBrowser,\n      aggregatedMediums = _state$artworkBrowser.aggregatedMediums,\n      filterParams = _state$artworkBrowser.filterParams,\n      initialMediumMap = _state$artworkBrowser.initialMediumMap;\n  var mediumIds = filterParams.gene_ids;\n  var allMediums = {\n    id: 'mediums-all',\n    name: 'All'\n  };\n  var allMediumsSelected = mediumIds.length === 0;\n  return {\n    aggregatedMediums: aggregatedMediums,\n    allMediums: allMediums,\n    mediumIds: mediumIds,\n    allMediumsSelected: allMediumsSelected,\n    initialMediumMap: initialMediumMap\n  };\n};\n\nvar mapDispatchToProps = {\n  updateMediumParamsAction: updateMediumParams\n};\n\nvar _default = connect(mapStateToProps, mapDispatchToProps)(MediumFilter);\n\nexport default _default;\nexport var test = {\n  MediumFilter: MediumFilter\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(BasicCheckbox, \"BasicCheckbox\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/sidebar/MediumFilter.js\");\n  reactHotLoader.register(MediumFilter, \"MediumFilter\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/sidebar/MediumFilter.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/sidebar/MediumFilter.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/sidebar/MediumFilter.js\");\n  reactHotLoader.register(test, \"test\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/sidebar/MediumFilter.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/sidebar/MediumFilter.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/eve/development/force/src/desktop/apps/auction/components/artwork_browser/sidebar/MediumFilter.js"],"names":["_BasicCheckbox","PropTypes","React","_","contains","block","connect","updateMediumParams","BasicCheckbox","MediumFilter","props","aggregatedMediums","allMediums","mediumIds","updateMediumParamsAction","allMediumsSelected","initialMediumMap","b","id","map","initialAgg","mediumSelected","includedMedium","find","agg","name","count","undefined","propTypes","array","isRequired","object","bool","func","mapStateToProps","state","artworkBrowser","filterParams","gene_ids","length","mapDispatchToProps","test"],"mappings":"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","sourcesContent":["import _BasicCheckbox from './BasicCheckbox'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport _, { contains } from 'underscore'\nimport block from 'bem-cn-lite'\nimport { connect } from 'react-redux'\nimport { updateMediumParams } from 'desktop/apps/auction/actions/artworkBrowser'\n\n// FIXME: Rewire\nlet BasicCheckbox = _BasicCheckbox\n\nfunction MediumFilter (props) {\n  const {\n    aggregatedMediums,\n    allMediums,\n    mediumIds,\n    updateMediumParamsAction,\n    allMediumsSelected,\n    initialMediumMap\n  } = props\n\n  const b = block('auction-MediumFilter')\n\n  return (\n    <div className={b()}>\n      <div className={b('title')}>\n        Medium\n      </div>\n\n      <BasicCheckbox\n        key={allMediums.id}\n        item={allMediums}\n        onClick={updateMediumParamsAction}\n        checked={allMediumsSelected}\n      />\n\n      {\n        _.map(initialMediumMap, (initialAgg) => {\n          const mediumSelected = contains(mediumIds, initialAgg.id)\n          const includedMedium = _.find(aggregatedMediums, (agg) => agg.id === initialAgg.id)\n          return (\n            <BasicCheckbox\n              key={initialAgg.id}\n              item={{\n                id: initialAgg.id,\n                name: initialAgg.name,\n                count: includedMedium && includedMedium.count\n              }}\n              onClick={updateMediumParamsAction}\n              checked={mediumSelected}\n              disabled={includedMedium === undefined}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nMediumFilter.propTypes = {\n  aggregatedMediums: PropTypes.array.isRequired,\n  allMediums: PropTypes.object.isRequired,\n  allMediumsSelected: PropTypes.bool.isRequired,\n  initialMediumMap: PropTypes.array.isRequired,\n  mediumIds: PropTypes.array.isRequired,\n  updateMediumParamsAction: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => {\n  const {\n    artworkBrowser: {\n      aggregatedMediums,\n      filterParams,\n      initialMediumMap\n    }\n  } = state\n\n  const mediumIds = filterParams.gene_ids\n  const allMediums = { id: 'mediums-all', name: 'All' }\n  const allMediumsSelected = mediumIds.length === 0\n\n  return {\n    aggregatedMediums,\n    allMediums,\n    mediumIds,\n    allMediumsSelected,\n    initialMediumMap\n  }\n}\n\nconst mapDispatchToProps = {\n  updateMediumParamsAction: updateMediumParams\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MediumFilter)\n\nexport const test = { MediumFilter }\n"]}]}