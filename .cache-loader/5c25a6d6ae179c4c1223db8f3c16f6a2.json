{"remainingRequest":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/eve/development/force/node_modules/@artsy/reaction/src/Router/buildServerApp.tsx","dependencies":[{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/src/Router/buildServerApp.tsx","mtime":1530569767000},{"path":"/Users/eve/development/force/node_modules/@artsy/reaction/.babelrc","mtime":1529423546000},{"path":"/Users/eve/development/force/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/force/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildServerApp = buildServerApp;\n\nvar _queryMiddleware = _interopRequireDefault(require(\"farce/lib/queryMiddleware\"));\n\nvar _foundRelay = require(\"found-relay\");\n\nvar _createRender = _interopRequireDefault(require(\"found/lib/createRender\"));\n\nvar _server = require(\"found/lib/server\");\n\nvar _server2 = require(\"loadable-components/server\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _server3 = _interopRequireDefault(require(\"react-dom/server\"));\n\nvar _createEnvironment = require(\"../Relay/createEnvironment\");\n\nvar _AppShell = require(\"./AppShell\");\n\nvar _Boot = require(\"./Boot\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step(\"next\", value); } function _throw(err) { step(\"throw\", err); } _next(); }); }; }\n\nfunction buildServerApp(config) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var routes, url, user, currentUser, relayEnvironment, historyMiddlewares, resolver, render, _ref2, redirect, status, element, bootProps, AppContainer, relayData, loadableState;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              routes = config.routes, url = config.url, user = config.user; // FIXME: Might be a better way to do this...\n\n              currentUser = user || {\n                id: process.env.USER_ID,\n                accessToken: process.env.USER_ACCESS_TOKEN\n              };\n              relayEnvironment = (0, _createEnvironment.createEnvironment)({\n                user: currentUser\n              });\n              historyMiddlewares = [_queryMiddleware.default];\n              resolver = new _foundRelay.Resolver(relayEnvironment);\n              render = (0, _createRender.default)({});\n              _context.next = 9;\n              return (0, _server.getFarceResult)({\n                url: url,\n                historyMiddlewares: historyMiddlewares,\n                routeConfig: routes,\n                resolver: resolver,\n                render: render\n              });\n\n            case 9:\n              _ref2 = _context.sent;\n              redirect = _ref2.redirect;\n              status = _ref2.status;\n              element = _ref2.element;\n\n              if (!redirect) {\n                _context.next = 16;\n                break;\n              }\n\n              resolve({\n                redirect: redirect,\n                status: status\n              });\n              return _context.abrupt(\"return\");\n\n            case 16:\n              bootProps = {\n                system: _extends({}, config, {\n                  relayEnvironment: relayEnvironment,\n                  resolver: resolver,\n                  routes: routes,\n                  currentUser: currentUser\n                })\n              };\n\n              AppContainer = function AppContainer(props) {\n                return _react.default.createElement(_Boot.Boot, _extends({}, bootProps, props), _react.default.createElement(_AppShell.AppShell, {\n                  data: props.relayData,\n                  loadableState: props.loadableState\n                }, element));\n              }; // Kick off relay requests to prime cache\n\n\n              _server3.default.renderToString(_react.default.createElement(AppContainer, null)); // Serializable data to be rehydrated on client\n\n\n              _context.next = 21;\n              return relayEnvironment.relaySSRMiddleware.getCache();\n\n            case 21:\n              relayData = _context.sent;\n              _context.next = 24;\n              return (0, _server2.getLoadableState)(_react.default.createElement(AppContainer, null));\n\n            case 24:\n              loadableState = _context.sent;\n              resolve({\n                ServerApp: function ServerApp(props) {\n                  return _react.default.createElement(AppContainer, _extends({\n                    data: relayData,\n                    loadableState: loadableState\n                  }, props));\n                },\n                status: status\n              });\n              _context.next = 32;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"[Reaction Router/buildServerApp] Error:\", _context.t0);\n              reject(_context.t0);\n\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 28]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}",{"version":3,"sources":["node_modules/@artsy/reaction/src/Router/buildServerApp.tsx"],"names":["buildServerApp","config","Promise","resolve","reject","routes","url","user","currentUser","id","process","env","USER_ID","accessToken","USER_ACCESS_TOKEN","relayEnvironment","historyMiddlewares","resolver","render","routeConfig","redirect","status","element","bootProps","system","AppContainer","props","relayData","loadableState","renderToString","relaySSRMiddleware","getCache","ServerApp","console","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAGO,SAASA,cAAT,CAAwBC,MAAxB,EAAwE;AAC7E,SAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,oBAFO,GAEeJ,MAFf,CAEPI,MAFO,EAECC,GAFD,GAEeL,MAFf,CAECK,GAFD,EAEMC,IAFN,GAEeN,MAFf,CAEMM,IAFN,EAIf;;AACMC,yBALS,GAKKD,QAAQ;AAC1BE,oBAAIC,QAAQC,GAAR,CAAYC,OADU;AAE1BC,6BAAaH,QAAQC,GAAR,CAAYG;AAFC,eALb;AASTC,8BATS,GASU,0CAAkB;AACzCR,sBAAMC;AADmC,eAAlB,CATV;AAYTQ,gCAZS,GAYY,0BAZZ;AAaTC,sBAbS,GAaE,yBAAaF,gBAAb,CAbF;AAcTG,oBAdS,GAcA,2BAAa,EAAb,CAdA;AAAA;AAAA,qBAgB6B,4BAAe;AACzDZ,wBADyD;AAEzDU,sDAFyD;AAGzDG,6BAAad,MAH4C;AAIzDY,kCAJyD;AAKzDC;AALyD,eAAf,CAhB7B;;AAAA;AAAA;AAgBPE,sBAhBO,SAgBPA,QAhBO;AAgBGC,oBAhBH,SAgBGA,MAhBH;AAgBWC,qBAhBX,SAgBWA,OAhBX;;AAAA,mBAwBXF,QAxBW;AAAA;AAAA;AAAA;;AAyBbjB,sBAAQ;AAAEiB,kCAAF;AAAYC;AAAZ,eAAR;AAzBa;;AAAA;AA8BTE,uBA9BS,GA8BG;AAChBC,qCAAavB,MAAb;AAAqBc,oDAArB;AAAuCE,oCAAvC;AAAiDZ,gCAAjD;AAAyDG;AAAzD;AADgB,eA9BH;;AAkCTiB,0BAlCS,GAkCM,SAAfA,YAAe,QAAS;AAC5B,uBACE,sDAAUF,SAAV,EAAyBG,KAAzB,GACE;AACE,wBAAMA,MAAMC,SADd;AAEE,iCAAeD,MAAME;AAFvB,mBAIGN,OAJH,CADF,CADF;AAUD,eA7Cc,EA+Cf;;;AACA,+BAAeO,cAAf,CAA8B,6BAAC,YAAD,OAA9B,EAhDe,CAkDf;;;AAlDe;AAAA,qBAmDSd,iBAAiBe,kBAAjB,CAAoCC,QAApC,EAnDT;;AAAA;AAmDTJ,uBAnDS;AAAA;AAAA,qBAoDa,+BAAiB,6BAAC,YAAD,OAAjB,CApDb;;AAAA;AAoDTC,2BApDS;AAsDfzB,sBAAQ;AACN6B,2BAAW;AAAA,yBACT,6BAAC,YAAD;AACE,0BAAML,SADR;AAEE,mCAAeC;AAFjB,qBAGMF,KAHN,EADS;AAAA,iBADL;AAQNL;AARM,eAAR;AAtDe;AAAA;;AAAA;AAAA;AAAA;AAiEfY,sBAAQC,KAAR,CAAc,yCAAd;AACA9B;;AAlEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAqED","file":"/Users/eve/development/force/node_modules/@artsy/reaction/src/Router/buildServerApp.tsx","sourceRoot":"/Users/eve/development/force","sourcesContent":["import queryMiddleware from \"farce/lib/queryMiddleware\"\nimport { Resolver } from \"found-relay\"\nimport createRender from \"found/lib/createRender\"\nimport { getFarceResult } from \"found/lib/server\"\nimport { getLoadableState } from \"loadable-components/server\"\nimport React from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\nimport { createEnvironment } from \"../Relay/createEnvironment\"\nimport { AppShell } from \"./AppShell\"\nimport { Boot } from \"./Boot\"\nimport { AppConfig, ServerResolveProps } from \"./types\"\n\nexport function buildServerApp(config: AppConfig): Promise<ServerResolveProps> {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { routes, url, user } = config\n\n      // FIXME: Might be a better way to do this...\n      const currentUser = user || {\n        id: process.env.USER_ID,\n        accessToken: process.env.USER_ACCESS_TOKEN,\n      }\n      const relayEnvironment = createEnvironment({\n        user: currentUser,\n      })\n      const historyMiddlewares = [queryMiddleware]\n      const resolver = new Resolver(relayEnvironment)\n      const render = createRender({})\n\n      const { redirect, status, element } = await getFarceResult({\n        url,\n        historyMiddlewares,\n        routeConfig: routes,\n        resolver,\n        render,\n      })\n\n      if (redirect) {\n        resolve({ redirect, status })\n\n        return\n      }\n\n      const bootProps = {\n        system: { ...config, relayEnvironment, resolver, routes, currentUser },\n      }\n\n      const AppContainer = props => {\n        return (\n          <Boot {...bootProps} {...props}>\n            <AppShell\n              data={props.relayData}\n              loadableState={props.loadableState}\n            >\n              {element}\n            </AppShell>\n          </Boot>\n        )\n      }\n\n      // Kick off relay requests to prime cache\n      ReactDOMServer.renderToString(<AppContainer />)\n\n      // Serializable data to be rehydrated on client\n      const relayData = await relayEnvironment.relaySSRMiddleware.getCache()\n      const loadableState = await getLoadableState(<AppContainer />)\n\n      resolve({\n        ServerApp: props => (\n          <AppContainer\n            data={relayData}\n            loadableState={loadableState}\n            {...props}\n          />\n        ),\n        status,\n      })\n    } catch (error) {\n      console.error(\"[Reaction Router/buildServerApp] Error:\", error)\n      reject(error)\n    }\n  })\n}\n"]}]}